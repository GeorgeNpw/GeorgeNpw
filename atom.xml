<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GeorgeN的博客</title>
  
  <subtitle>宁静致远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-20T13:48:01.759Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>npw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM常用基础参数</title>
    <link href="http://yoursite.com/2019/05/20/JVM%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2019/05/20/JVM常用基础参数/</id>
    <published>2019-05-20T13:46:31.000Z</published>
    <updated>2019-05-20T13:48:01.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM的参数类型"><a href="#JVM的参数类型" class="headerlink" title="JVM的参数类型"></a>JVM的参数类型</h2><ol><li>标配参数</li><li>x参数</li><li>xx参数</li></ol><h3 id="标配参数"><a href="#标配参数" class="headerlink" title="标配参数"></a>标配参数</h3><blockquote><p>-version， -help， java -showversion</p></blockquote><h3 id="XX参数"><a href="#XX参数" class="headerlink" title="XX参数"></a>XX参数</h3><ol><li>boolean类型：+开启/ -关闭  公式：-xx:+/-某个属性</li><li>KV设值类型：-xx:属性key=属性值value  case：-xx:MetaspaceSize=128m</li></ol><h2 id="常用基础参数"><a href="#常用基础参数" class="headerlink" title="常用基础参数"></a>常用基础参数</h2><ol><li>-Xms：初始内存大小，默认为物理内存的1/64，等价于<code>-xx:InitialHeapSize</code></li><li>-Xmx：最大分配内存，默认为物理内存的1/4，等价于<code>-xx:MaxHeapSize</code></li><li>-Xss：设置单个线程栈的大小，默认为 512K~1024K，等价于<code>-xx:ThreadStackSize</code></li><li>-Xmn：设置年轻代的大小，默认为堆空间的1/3，老年代为2/3</li><li><code>-xx:MetaspaceSize</code>：设置元空间的大小，元空间的本质和永久代类似，不过元空间不在虚拟机中，而是使用的本地内存</li><li><code>-xx:+UseSerialGC</code>：使用串行垃圾回收器</li><li><code>-xx:+UseParallelGC</code>：使用并行垃圾回收器</li><li><code>-xx:+PrintGCDetails</code>：输出GC详细的日志收集信息，包括GC 和FullGC</li><li><code>-xx:+SurvivorRatio</code>：设置年轻代中Eden区和S0,S1的比例，默认<code>-xx:+SurvivorRatio=8</code>，Eden:S0:S1=8:1:1</li><li><code>-xx:NewRatio</code>：设置年轻代和老年代在堆中的占比。默认<code>-xx:NewRatio=2</code>，年轻代占1，老年代占2，年轻代占堆的1/3</li><li><code>-xx:MaxTenuringThreshold</code>：设置垃圾的最大年龄，若为0，则年轻代对象不经过Survivor区，直接进入老年代，默认为15</li></ol><h2 id="如何在IDE中查看"><a href="#如何在IDE中查看" class="headerlink" title="如何在IDE中查看"></a>如何在IDE中查看</h2><ul><li><p>如何查看当前运行程序的配置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jps -l</span><br><span class="line">jinfo -flag 参数名 线程号</span><br><span class="line">jinfo -flags 线程号  -- 查看所有参数</span><br><span class="line">Non-default 后的是根据机器配置自动调整后出的参数</span><br><span class="line">Command line 后的是自己配置的参数</span><br></pre></td></tr></table></figure></li><li><p>查看初始默认值<br><code>java -xx:+PrintFlagsInitial -version</code></p></li><li><p>查看修改更新<br><code>java -xx:+PrintFlagsFinal -version</code><br>结果：  <strong>=</strong> 没改过；      <strong>:=</strong> 修改过或JVM根据硬件不同自动调整过</p></li><li>在运行时修改变更值  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -xx:+PrintFlagsFinal -xx:MetaspaceSize=128m 类名</span><br><span class="line">java -xx:+PrintCommandLineFlags -version 可以用来查看垃圾回收器</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      JVM常用基础参数
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java中的四种引用</title>
    <link href="http://yoursite.com/2019/05/20/Java%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2019/05/20/Java中的四种引用/</id>
    <published>2019-05-20T13:46:17.000Z</published>
    <updated>2019-05-20T13:49:15.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-强引用（Strong-Reference）"><a href="#1-强引用（Strong-Reference）" class="headerlink" title="1. 强引用（Strong Reference）"></a>1. 强引用（Strong Reference）</h2><p>强引用是指在程序代码中普遍存在的，类似“Object obj=new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</p><p>只要某个对象有强引用与之关联，JVM必定不会回收这个对象，即使在内存不足的情况下，JVM宁愿抛出OutOfMemory错误也不会回收这种对象</p><h2 id="2-软引用（Soft-Reference）"><a href="#2-软引用（Soft-Reference）" class="headerlink" title="2. 软引用（Soft Reference）"></a>2. 软引用（Soft Reference）</h2><p>软引用是用来描述一些有用但并不是必需的对象。对于软引用关联着的对象，只有在<strong>内存不足</strong>的时候JVM才会回收该对象。因此，这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等。JDK 1.2之后，提供了SoftReference类来实现软引用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.ref.SoftReference;</span><br><span class="line"> </span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">         </span><br><span class="line">        SoftReference&lt;String&gt; sr = new SoftReference&lt;String&gt;(new String(<span class="string">"hello"</span>));</span><br><span class="line">        System.out.println(sr.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-弱引用（WeakReference）"><a href="#3-弱引用（WeakReference）" class="headerlink" title="3. 弱引用（WeakReference）"></a>3. 弱引用（WeakReference）</h2><p>弱引用也是用来描述非必需对象的，当JVM进行垃圾回收时，<strong>无论内存是否充足</strong>，都会回收被弱引用关联的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.ref.WeakReference;</span><br><span class="line"> </span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">     </span><br><span class="line">        WeakReference&lt;String&gt; sr = new WeakReference&lt;String&gt;(new String(&quot;hello&quot;));</span><br><span class="line">         </span><br><span class="line">        System.out.println(sr.get());</span><br><span class="line">        System.gc();                //通知JVM的gc进行垃圾回收</span><br><span class="line">        System.out.println(sr.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-虚引用（PhantomReference）"><a href="#4-虚引用（PhantomReference）" class="headerlink" title="4. 虚引用（PhantomReference）"></a>4. 虚引用（PhantomReference）</h2><p>虚引用和前面的软引用、弱引用不同，它并不影响对象的生命周期。如果一个对象与虚引用关联，跟没有引用与之关联一样，在任何时候都可能被垃圾回收器回收。不能单独使用，必须和<strong>引用队列</strong> ReferenceQueue联合使用</p><p>ReferenceQueue是用来配合引用工作的，创建引用时可以指定关联的队列，当GC释放引用对象的内存时，会将引用加入到ReferenceQueue</p><p>如果程序发现某个虚引用被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动，这相当于一种<strong>通知机制</strong>。当队列中有数据时，意味着引用指向的堆内存中的对象被回收。通过这种方式，JVM允许我们在对象被销毁后做一些我们想做的事</p><h2 id="四种引用对比"><a href="#四种引用对比" class="headerlink" title="四种引用对比"></a>四种引用对比</h2><table><thead><tr><th>对比</th><th>强引用</th><th>软引用</th><th>弱引用</th><th>虚引用</th></tr></thead><tbody><tr><td>引用强度</td><td>最强</td><td>第二</td><td>第三</td><td>最弱</td></tr><tr><td>如何使用</td><td>new Object()</td><td>SoftReference</td><td>WeakReference</td><td>PhantomReference</td></tr></tbody></table><h2 id="软引用和弱引用的使用场景"><a href="#软引用和弱引用的使用场景" class="headerlink" title="软引用和弱引用的使用场景"></a>软引用和弱引用的使用场景</h2><p>当一个应用要大量读取本地的图片，若每次都从硬盘读取会影响性能，而一次性全部加载进内存会造成内存溢出。</p><p>设计思路：使用一个HashMap来保存图片路径和相应图片对象关联的软引用间的映射关系，在内存不足时，JVM会自动回收这些空间</p><p><code>Map&lt;String, SoftReference&lt;BitMap&gt;&gt; imageCache = new Map&lt;String, SoftReference&lt;BitMap&gt;&gt;();</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private Map&lt;String, SoftReference&lt;Bitmap&gt;&gt; imageCache = new HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();</span><br><span class="line">&lt;br&gt;....</span><br><span class="line">public void addBitmapToCache(String path) &#123;</span><br><span class="line">// 强引用的Bitmap对象</span><br><span class="line">Bitmap bitmap = BitmapFactory.decodeFile(path);</span><br><span class="line">// 软引用的Bitmap对象</span><br><span class="line">SoftReference&lt;Bitmap&gt; softBitmap = new SoftReference&lt;Bitmap&gt;(bitmap);</span><br><span class="line">// 添加该对象到Map中使其缓存</span><br><span class="line">imageCache.put(path, softBitmap);</span><br><span class="line">&#125;</span><br><span class="line">public Bitmap getBitmapByPath(String path) &#123;</span><br><span class="line">// 从缓存中取软引用的Bitmap对象</span><br><span class="line">SoftReference&lt;Bitmap&gt; softBitmap = imageCache.get(path);</span><br><span class="line">// 判断是否存在软引用</span><br><span class="line"><span class="keyword">if</span> (softBitmap == null) &#123;</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line">// 取出Bitmap对象，如果由于内存不足Bitmap被回收，将取得空</span><br><span class="line">Bitmap bitmap = softBitmap.get();</span><br><span class="line"><span class="built_in">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java中的四种引用
    
    </summary>
    
      <category term="Java引用" scheme="http://yoursite.com/categories/Java%E5%BC%95%E7%94%A8/"/>
    
    
      <category term="Java引用" scheme="http://yoursite.com/tags/Java%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JVM—垃圾回收机制(1)</title>
    <link href="http://yoursite.com/2019/05/16/JVM%E2%80%94%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6-1/"/>
    <id>http://yoursite.com/2019/05/16/JVM—垃圾回收机制-1/</id>
    <published>2019-05-16T08:50:17.000Z</published>
    <updated>2019-05-16T12:33:52.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哪些内存需要回收"><a href="#哪些内存需要回收" class="headerlink" title="哪些内存需要回收"></a>哪些内存需要回收</h2><p>由于程序计数器、虚拟机栈、本地方法栈的生命周期都跟随线程的生命周期，当线程销毁了，内存也就回收了，所以这几个区域不用过多地考虑内存回收。由于<strong>堆</strong>和<strong>方法区</strong>的内存都是动态分配的，而且是线程共享的，所以内存回收主要关注这部分区域。</p><h2 id="如何判断对象是否存活"><a href="#如何判断对象是否存活" class="headerlink" title="如何判断对象是否存活"></a>如何判断对象是否存活</h2><p><strong>引用计数法</strong></p><blockquote><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1，如果引用失效，计数器值减1，所以当该计数器的值为0时，就表示该对象可以被回收了。但是存在两个对象之间相互循环引用的问题。</p></blockquote><p><strong>可达性分析算法</strong></p><blockquote><p>通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索的路径称为引用链，当一个对象到“GC Roots”没有任何引用链相连的话，也就是GC Roots到这个对象不可达时，证明此对象已经不可用，可以被回收了。</p></blockquote><p><strong>二次标记</strong></p><blockquote><p>在可达性分析算法中被判断是对象不可达时不一定会被垃圾回收机制回收，因为要真正宣告一个对象的死亡，必须经历两次标记的过程。如果发现对象不可达时，将会进行第一次标记，此时如果该对象调用了finalize()方法，那么这个对象会被放置在一个叫F-Queue的队列之中，如果在此队列中该对象没有成功拯救自己（拯救自己的方法是该对象有没有被重新引用），那么GC就会对F-Queue队列中的对象进行小规模的第二次标记，一旦被第二次标记的对象，将会被移除队列并等待被GC回收，所以finalize()方法是对象逃脱死亡命运的最后一次机会。</p></blockquote><h2 id="常用垃圾回收算法"><a href="#常用垃圾回收算法" class="headerlink" title="常用垃圾回收算法"></a>常用垃圾回收算法</h2><p><strong>引用计数法</strong>：  JVM一般不用</p><p><strong>复制算法</strong>：复制、清空、互换<br>把内存按容量划分为大小相等的两块区域，每次只使用其中的一块，当这一块的内存空间用完了，就把还存活的对象复制到另一块内存中去，然后把已经使用的过的内存空间一次性清理掉。这样每次都是对半个内存区域进行GC回收，并不会产生内存碎片，但是代价是把内存缩小了一半，效率比较低。<br>（1）Eden、SurvivorFrom <strong>复制</strong>到 SurvivorTo，年龄+1<br>首先 Eden 区满，触发第一次 GC，将活着的对象复制到 SurvivorFrom 区，当 Eden 区再次触发 GC 时撒扫描 Eden 区和 SurvivorFrom 区，对两区进行垃圾回收，还存活的对象复制到 SurvivorTo 区（若对象年龄达到老年的标准，复制到老年代）<br>（2）<strong>清空</strong> Eden、SurvivorFrom<br>清空 Eden、SurvivorFrom 区中的对象，也即复制之后的交换，谁空谁是To<br>（3）SurvivorFrom 区和 SurvivorTo 区<strong>互换</strong><br>原 To 区成为下一次 GC 时的 From 区，部分对象会在 From 区和 To 区间来回复制，达到15次（JVM参数MaxTenuringThreshold决定，默认值为15）还存活，将其复制到老年代</p><p><strong>标记—清除算法</strong>：<br>首先<strong>标记</strong>出需要回收的对象，在标记完成后进行统一的回收（<strong>标记即二次标记的过程</strong>）。此算法有两个不足：一是效率问题，标记和清除两个过程效率都不高；二是空间问题，标记清除后会产生大量不连续的<strong>内存碎片</strong>，内存空间碎片太多的话会导致以后程序在运行中想要分配较大对象的时候，无法找到一块连续的内存空间而导致不得不进行又一次的GC回收（后续的垃圾回收算法都是基于此算法进行改进的）</p><p><strong>标记—整理算法</strong>：<br>标记算法一样，区别是清除的时候会把所有存活的对象向一端移动（向上和向左），然后清除掉端边界以外的内存。相比标记—清除算法，此方法没有内存碎片，但付出了移动对象的成本。</p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>根据对象存活周期的不同将内存划分为几块（年轻代或老年代），然后根据每个年代的特点采用最合适的收集算法。</p><p>比如在<strong>年轻代</strong>中，每次都有大量对象死去，就选择<strong>复制算法</strong>；</p><p>而在<strong>老年代</strong>中对象的生存率高，没有额外的空间为它进行分配担保，所以采用<strong>标记—清除算法</strong>或者<strong>标记—整理算法</strong>来进行回收。</p><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><blockquote><p>什么是新生代、老年代</p></blockquote><p>新生代：新生代包含一个Eden区和两个Survivor区。大多数情况下，新创建的对象会在新生代Eden区中分配，当Eden区没有足够的空间进行分配时，虚拟机会触发一次Minor GC，如果Survivor区空间允许的话，该对象将被分配到Survivor。</p><p>老年代：<strong>大对象</strong>直接在老年代中分配，大对象指需要大量连续内存空间的Java对象。</p><blockquote><p>分代收集如何判定对象的年龄？</p></blockquote><p>虚拟机给每个对象定义了一个对象年龄计数器，如果对象在Eden区出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间，并且对象年龄设置为1,。对象在Survivor区中每熬过一次Minor GC，年龄就增加1岁，当对象的年龄增加到一定程度（默认为15岁），就会被晋升到老年代中</p><blockquote><p>为什么新生代中要有Survivor区？</p></blockquote><p>防止频繁触发FULL GC。如果没有Survivor，Eden区每进行一次Minor GC，存活的对象就会被送到老年代，这样会使老年代很快被填满，导致老年代触发FULL GC，由于老年代的内存空间远大于新生代，所以进行一次Full GC消耗的时间比Minor GC长得多。</p><blockquote><p>为什么要设置两个Survivor区？</p></blockquote><p>防止产生内存空间碎片。如果只有Survivor1，那么每一次当Eden区满时，触发Minor GC并把对象移入Survivor1中，如此循环对导致Survivor1中产生大量的空间碎片；所以需要有Survivor2，当Eden再一次满时，触发Minor GC，虚拟机会把Eden中和Survivor1中的存活对象通过复制算法移入Survivor2中，这样Survivor2就不会产生内存碎片，同时Eden和Survivor1会清理内存，保证下一次Minor GC触发时的操作。</p><blockquote><p>Minor GC和Full GC的区别？</p></blockquote><p>（1）新生代GC（Minor GC）：指发生在新生代的垃圾收集动作，因为Java对象大多数都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度比较快。<br>（2）老年代GC（Full GC）：指发生在老年代的垃圾收集动作，速度非常慢，所以要尽量减少Full GC的发生。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li>强引用：指向使用new关键字创建的对象的引用都是强引用，只要该对象的强引用还在，该对象永远都不会被GC回收；</li><li>软引用：当内存不足时，就会被回收；</li><li>弱引用：只要发生GC，就会被回收；</li><li>虚引用：随时都会被回收；</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《深入理解Java虚拟机》第2版 第3章 垃圾收集器与内存分配策略</p>]]></content>
    
    <summary type="html">
    
      JVM—垃圾回收机制
    
    </summary>
    
      <category term="垃圾回收" scheme="http://yoursite.com/categories/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="垃圾回收" scheme="http://yoursite.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java内存原型</title>
    <link href="http://yoursite.com/2019/05/16/Java%E5%86%85%E5%AD%98%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/05/16/Java内存原型/</id>
    <published>2019-05-16T08:50:00.000Z</published>
    <updated>2019-05-16T08:54:03.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java虚拟机内存原型"><a href="#Java虚拟机内存原型" class="headerlink" title="Java虚拟机内存原型"></a>Java虚拟机内存原型</h2><ul><li><strong>寄存器</strong>： 我们在程序中无法控制。</li><li><strong>栈</strong>： 存放基本类型的数据和对象引用，但对象本身不在栈中而是堆中。</li><li><strong>堆</strong>： 存放用 new 产生的数据</li><li><strong>静态域</strong>：存放在对象中用 static 定义的静态成员</li><li><strong>常量池</strong>：存放常量</li><li><strong>非 RAM 存储</strong>：硬盘等永久存储空间<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g339c07vh4j30d50d60ud.jpg" alt=""></li></ul><h2 id="常量池（constant-pool）"><a href="#常量池（constant-pool）" class="headerlink" title="常量池（constant pool）"></a>常量池（constant pool）</h2><p>常量池指的是在编译期被确定，并被保存在已编译的 class 文件中的一些数据。除了包含代码中所定义的各种基本类型（如 int、long 等等）和对象型（如 String 及数组）的常量值（final）外，还包含一些以文本形式出现的符号引用，比如： </p><ol><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ol><p>虚拟机必须为每个被装载的类型维护一个常量池。常量池就是该类型所用到常量的一个有序集合，包括直接常量（ string,integer 等）和其他类型：字段和方法的符号引用。<strong>对于 String 常量，它的值是在常量池中的。</strong> 而 JVM 中的常量池在内存当中是以表的形式存在的，对于 String 类型，有一张固定长度的CONSTANT_String_info 表用来存储文字字符串值，注意：该表只存储文字字符串值，不存储符号引用。说到这里，对常量池中的字符串值的存储位置应该有一个比较明了的理解了。在程序执行的时候，<strong>常量池会储存在 Method Area，而不是堆中</strong>。 </p><h2 id="Java内存分配中的栈"><a href="#Java内存分配中的栈" class="headerlink" title="Java内存分配中的栈"></a>Java内存分配中的栈</h2><p>栈的基本单位是<strong>帧</strong>（或栈帧）：每当一个 Java线程运行的时候，Java虚拟机会为该线程分配一个Java<br>栈。该线程在执行某个Java方法的时候，向Java栈压入一个帧，这个帧用于<strong>存储参数、局部变量、操作数、中间运算结果</strong>等。当这个方法执行完的时候，帧会从栈中弹出。Java栈上的所有数据是<strong>私有的</strong>，其他线程都不能访问该线程的栈数据。在函数中定义的一些基本类型的变量数据和对象的引用变量都在函数的栈内存中分配。当在一段代码块中定义一个变量时，Java就在栈中为这个变量分配内存空间，当该变量退出该作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。 </p><h2 id="Java内存中分配的堆"><a href="#Java内存中分配的堆" class="headerlink" title="Java内存中分配的堆"></a>Java内存中分配的堆</h2><p>Java虚拟机中的堆用来存放由 <strong>new</strong> 创建的<strong>对象和数组</strong>。在堆中分配的内存，由Java虚拟机的自动<strong>垃圾回收机制</strong>来管理堆的内存。简单的说和栈相对，<strong>堆主要是用来存放Java对象的，栈主要是用来存放对象引用的</strong>。在堆中产生了一个数组或对象后，还可以在栈中定义一个特殊的变量，让栈中这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量。引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。引用变量就相当于是为数组或对象起的一个名称。</p><p>引用变量是普通的变量，定义时在栈中分配，引用变量在程序运行到其作用域之外后被释放。而数组和对象本身在堆中分配，即使程序运行到使用 new 产生数组或者对象的语句所在的代码块之外，数组和对象本身占据的内存不会被释放，数组和对象在没有引用变量指向它的时候，才变为垃圾，不能再被使用，但仍然占据内存空间不放，在随后的一个不确定的时间被垃圾回收器收走（释放掉）。这也是Java比较占内存的原因。<strong>实际上，栈中的变量指向堆内存中的变量，这就是Java中的指针！</strong> </p><h2 id="堆和栈的比较"><a href="#堆和栈的比较" class="headerlink" title="堆和栈的比较"></a>堆和栈的比较</h2><p>java的堆是一个运行时数据区，类的对象从中分配空间。这些对象通过 new + 构造器等指令建立，它们不需要程序代码来显式的释放。堆是由垃圾回收来负责的，<strong>堆的优势</strong>是可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。 </p><p><strong>栈的优势</strong>是存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量数据（int，short，long，byte，float，double，boolean，char）和对象引用。 </p><p>栈有一个很重要的特殊性，就是<strong>存在栈中的数据可以共享</strong>。假设我们同时定义： int a=3；int b=3；编译器先处理 int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找栈中是否有3这个值，如果没找到，就将3存放进来，然后将 a 指向3，接着处理 int b = 3；在创建完 b 的引用变量后，因为在栈中已经有3这个值，便将b直接指向3这样，就出现了 a 与 b 同时均指向3的情况。 </p><p>这时，如果再令 a=4；那么编译器会重新搜索栈中是否有4值，如果没有，则将4存放进来，并令a指向4；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。 </p><p><strong>要注意这种数据的共享与两个对象的引用同时指向一个对象的这种共享是不同的</strong>，因为这种情况 a 的修改并不会影响到 b，它是由编译器完成的，它有利于节省空间。而一个对象引用变量修改了这个对象的内部状态，会影响到另一个对象引用变量。 </p>]]></content>
    
    <summary type="html">
    
      Java虚拟机内存原型
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="内存模型" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>死锁</title>
    <link href="http://yoursite.com/2019/05/15/%E6%AD%BB%E9%94%81/"/>
    <id>http://yoursite.com/2019/05/15/死锁/</id>
    <published>2019-05-15T14:45:39.000Z</published>
    <updated>2019-05-15T14:48:25.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="死锁产生原因"><a href="#死锁产生原因" class="headerlink" title="死锁产生原因"></a>死锁产生原因</h2><p>死锁是指两个或者两个以上的进程在执行过程中，因抢夺资源而造成的一种互相等待的现象，若无外力干涉它们将都无法推进下去。</p><p>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性也就很低，否则就会因争夺有限的资源而陷入死锁。</p><h2 id="死锁代码"><a href="#死锁代码" class="headerlink" title="死锁代码"></a>死锁代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class DeadLockDemo &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String lockA = <span class="string">"lockA"</span>;</span><br><span class="line">        String lockB = <span class="string">"lockB"</span>;</span><br><span class="line"></span><br><span class="line">        new Thread(new HoldLockThread(lockA,lockB),<span class="string">"ThreadAAA"</span>).start();</span><br><span class="line">        new Thread(new HoldLockThread(lockB,lockA),<span class="string">"ThreadBBB"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HoldLockThread implements Runnable&#123;</span><br><span class="line">    private String lockA;</span><br><span class="line">    private String lockB;</span><br><span class="line"></span><br><span class="line">    public HoldLockThread(String lockA,String lockB)&#123;</span><br><span class="line">        this.lockA = lockA;</span><br><span class="line">        this.lockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void <span class="function"><span class="title">run</span></span>()&#123;</span><br><span class="line">        synchronized (lockA)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"\t自己持有："</span>+lockA+<span class="string">"\t尝试获得："</span>+lockB);</span><br><span class="line">            //暂停一下</span><br><span class="line">            try&#123; TimeUnit.SECONDS.sleep(2); &#125;catch (InterruptedException e)&#123;e.printStackTrace();&#125;</span><br><span class="line"></span><br><span class="line">            synchronized (lockB)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"\t自己持有："</span>+lockB+<span class="string">"\t尝试获得："</span>+lockA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何查找定位"><a href="#如何查找定位" class="headerlink" title="如何查找定位"></a>如何查找定位</h2><ul><li>linux环境下  使用 ps -ef|grep xxxx    ls -l 查看当前进程的命令</li><li>windows下的java运行程序，也有类似ps的查看进程的命令：jps -l 命令定位进程号；jstack xxxx(进程号)命令找到死锁查看</li></ul>]]></content>
    
    <summary type="html">
    
      死锁
    
    </summary>
    
      <category term="死锁" scheme="http://yoursite.com/categories/%E6%AD%BB%E9%94%81/"/>
    
    
      <category term="死锁" scheme="http://yoursite.com/tags/%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java线程池</title>
    <link href="http://yoursite.com/2019/05/15/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2019/05/15/Java线程池/</id>
    <published>2019-05-15T14:45:17.000Z</published>
    <updated>2019-05-15T14:48:16.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>之前我们在使用多线程都是用Thread的start()来创建启动一个线程，但是在实际开发中，如果每个请求到达就创建一个新线程，开销是相当大的。服务器在创建和销毁线程上花费的时间和消耗的系统资源都相当大，甚至可能要比在处理实际的用请求的时间和资源要多的多。除了创建和销毁线程的开销之外，活动的线程也需要消耗系统资源。如果在一个 jvm 里创建太多的线程，可能会使系统由于过度消耗内存或“切换过度”而导致系统资源不足。这就引入了线程池概念。（第4种获得/使用java多线程的方式）线程池的主要特点是：线程复用，控制最大并发数，管理线程。</p><h2 id="线程池的优势"><a href="#线程池的优势" class="headerlink" title="线程池的优势"></a>线程池的优势</h2><p>在java.util.concurrent包下，提供了一系列与线程池相关的类。合理的使用线程池，可以带来多个好处：</p><ol><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ol><h2 id="如何使用线程池"><a href="#如何使用线程池" class="headerlink" title="如何使用线程池"></a>如何使用线程池</h2><ul><li>1、创建线程池</li><li>2、创建任务</li><li>3、执行任务</li><li>4、关闭线程池</li></ul><h2 id="五种线程池的使用场景"><a href="#五种线程池的使用场景" class="headerlink" title="五种线程池的使用场景"></a>五种线程池的使用场景</h2><ul><li><code>newSingleThreadExecutor</code> ：一个单线程的线程池，可以用于需要保证顺序执行的场景，并且只有一个线程在执行。</li><li><code>newFixedThreadPool</code> ：一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制。</li><li><code>newCachedThreadPool</code> ：一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务。</li><li><code>newScheduledThreadPool</code> ：一个可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景。</li><li><code>newWorkStealingPool</code> ：一个拥有多个任务队列的线程池，可以减少连接数，创建当前可用cpu数量的线程来并行执行。</li></ul><h2 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService threadPool = new ThreadPoolExecutor(2,</span><br><span class="line">                5,</span><br><span class="line">                1L,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                new LinkedBlockingQueue&lt;&gt;(3),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                new ThreadPoolExecutor.DiscardPolicy());</span><br></pre></td></tr></table></figure><p>线程池不允许用Executors来创建，而是通过ThreadPoolExecutor这样的方式，这样的处理方式可以让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br><strong>说明：</strong> Executors返回的线程池对象弊端如下：</p><ul><li>FixedThreadPool 和 SingleThreadExecutor：允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，导致OOM。</li><li>CachedThreadPool 和 ScheduledThreadPool：允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，导致OOM。</li></ul><h2 id="线程池的七大参数"><a href="#线程池的七大参数" class="headerlink" title="线程池的七大参数"></a>线程池的七大参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span><br><span class="line">                              int maximumPoolSize,</span><br><span class="line">                              long keepAliveTime,</span><br><span class="line">                              TimeUnit unit,</span><br><span class="line">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                              ThreadFactory threadFactory,</span><br><span class="line">                              RejectedExecutionHandler handler) ;</span><br></pre></td></tr></table></figure><ul><li>corePoolSize ：线程池中常驻的核心线程数，决定着新提交的任务是新开线程去执行还是放到任务队列中，也是线程池的最最核心的参数。一般线程池开始时是没有线程的，只有当任务来了并且线程数量小于corePoolSize才会创建线程。                             </li><li>maximumPoolSize ：最大线程数，线程池能创建的最大线程数量。</li><li>keepAliveTime ：在线程数量超过corePoolSize后，多余空闲线程的最大存活时间。</li><li>unit ：keepAliveTime时间单位</li><li>workQueue ：存放来不及处理的任务的队列，是一个BlockingQueue。</li><li><p>threadFactory ：生产线程的工厂类，可以定义线程名，优先级等。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()</span><br><span class="line">            .setNameFormat(<span class="string">"demo-pool-%d"</span>).build();</span><br></pre></td></tr></table></figure></li><li><p>handler ：拒绝策略，当前队列满且工作线程数大于或等于maximumPoolSize时启用，共4种策略。</p></li></ul><h2 id="4种拒绝策略"><a href="#4种拒绝策略" class="headerlink" title="4种拒绝策略"></a>4种拒绝策略</h2><ol><li><code>AbortPolicy</code> ：当任务添加到线程池中被拒绝时，它将抛出 RejectedExecutionException 异常。</li><li><code>CallerRunsPolicy</code> ： 当任务添加到线程池中被拒绝时，将任务回退给调用者。</li><li><code>DiscardOldestPolicy</code> ：当任务添加到线程池中被拒绝时，线程池会放弃等待队列中最久的未处理任务，然后将被拒绝的任务添加到等待队列中，并尝试再次提交。</li><li><code>DiscardPolicy</code> ：当任务添加到线程池中被拒绝时，线程池将丢弃被拒绝的任务，如果允许任务丢失，这是最好的方案。<h2 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h2>线程池使用完毕，需要对其进行关闭，有两种方法<blockquote><p>shutdown()</p></blockquote></li></ol><p>说明：shutdown并不是直接关闭线程池，而是不再接受新的任务…如果线程池内有任务，那么把这些任务执行完毕后，关闭线程池</p><blockquote><p>shutdownNow()</p></blockquote><p>说明：这个方法表示不再接受新的任务，并把任务队列中的任务直接移出掉，如果有正在执行的，尝试进行停止</p><h2 id="线程池的底层工作原理"><a href="#线程池的底层工作原理" class="headerlink" title="线程池的底层工作原理"></a>线程池的底层工作原理</h2><ol><li>提交任务</li><li>核心线程是否已满？ Y 跳转至第3步；  N 创建执行线程</li><li>队列已满？   Y 跳转至第4步；  N 加入队列</li><li>最大线程已满？   Y 跳转至第5步；  N 创建线程</li><li>拒绝策略</li></ol><h2 id="如何配置合理的线程数"><a href="#如何配置合理的线程数" class="headerlink" title="如何配置合理的线程数"></a>如何配置合理的线程数</h2><p>线程池中线程数目的设置依托于硬件设备（CPU核数）以及需要执行任务的类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看CPU核数</span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure></p><p>CPU密集型任务：</p><ul><li>特点：大量运算，没有阻塞，CPU一直全速运行</li><li>配置：应配置尽可能<strong>少</strong>的线程数量。</li><li>公式：CPU核数 + 1</li></ul><p>IO密集型任务：</p><ul><li>特点：大部分线程阻塞，CPU不是一直执行任务</li><li>配置：应配置尽可能<strong>多</strong>的线程数量。如：CPU核数 * 2</li><li>公式：CPU核数 / (1 - 阻塞系数)  阻塞系数约为0.8~0.9</li></ul>]]></content>
    
    <summary type="html">
    
      Java线程池概述
    
    </summary>
    
      <category term="ThreadPool" scheme="http://yoursite.com/categories/ThreadPool/"/>
    
    
      <category term="ThreadPool" scheme="http://yoursite.com/tags/ThreadPool/"/>
    
  </entry>
  
  <entry>
    <title>JUC初探</title>
    <link href="http://yoursite.com/2019/05/15/JUC%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2019/05/15/JUC初探/</id>
    <published>2019-05-15T14:44:59.000Z</published>
    <updated>2019-05-15T14:49:18.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JUC-简介"><a href="#一、JUC-简介" class="headerlink" title="一、JUC 简介"></a>一、JUC 简介</h2><p>JUC：java.util.concurrent 在并发编程中使用的工具类</p><h2 id="二、Lock-接口"><a href="#二、Lock-接口" class="headerlink" title="二、Lock 接口"></a>二、Lock 接口</h2><h3 id="1-Synchronized"><a href="#1-Synchronized" class="headerlink" title="1. Synchronized"></a>1. Synchronized</h3><h4 id="1-1-多线程编程模板"><a href="#1-1-多线程编程模板" class="headerlink" title="1.1 多线程编程模板"></a>1.1 多线程编程模板</h4><ul><li>线程      操作      资源类</li><li>判断      干活      通知</li><li>高内聚低耦合</li><li><font color="#DC143C">注意：多线程的判断必须使用while循环，不能使用if</font><h4 id="1-2-实现步骤"><a href="#1-2-实现步骤" class="headerlink" title="1.2 实现步骤"></a>1.2 实现步骤</h4></li></ul><ol><li>创建资源类</li><li>资源类里创建同步方法、同步代码块<h3 id="2-Lock"><a href="#2-Lock" class="headerlink" title="2. Lock"></a>2. Lock</h3><h4 id="2-1-Lock是什么"><a href="#2-1-Lock是什么" class="headerlink" title="2.1 Lock是什么"></a>2.1 Lock是什么</h4>Lock 实现提供更广泛的锁定操作可以比使用synchronized 获得方法和声明更好。他们允许更灵活的结构，可以有完全不同的特性，可以支持多个相关的Condition 对象。<h4 id="2-2-Lock接口的实现"><a href="#2-2-Lock接口的实现" class="headerlink" title="2.2 Lock接口的实现"></a>2.2 Lock接口的实现</h4>ReentrantLock 可重入锁，参考Java8API<h4 id="2-3-lambda-表达式"><a href="#2-3-lambda-表达式" class="headerlink" title="2.3 lambda 表达式"></a>2.3 lambda 表达式</h4></li><li>要求：lambda 表达式，如果一个接口只有一个方法，我可以把方法名省略</li><li><p>编写规则：拷贝小括号（），写死右箭头-&gt;，落地大括号{…}</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo foo = () -&gt; &#123;System.out.println(&quot;****hello lambda&quot;);&#125;;</span><br></pre></td></tr></table></figure></li><li><p>函数式接口：lambda 表达式，必须是函数式接口，必须只有一个方法，如果接口只有一个方法java 默认它为函数式接口。为了正确使用Lambda 表达式，需要给接口加个注解：@FunctionalInterface，如有两个方法，立刻报错。</p><h4 id="2-4-Lock与Synchronized的区别，用Lock有什么好处"><a href="#2-4-Lock与Synchronized的区别，用Lock有什么好处" class="headerlink" title="2.4 Lock与Synchronized的区别，用Lock有什么好处"></a>2.4 Lock与Synchronized的区别，用Lock有什么好处</h4><ol><li><p>原始构成：</p><ul><li>synchronized是关键字，属于JVM层面<br>monitorenter（底层通过monitor对象来完成，wait/notify等方法也依赖于monitor对象，只有再同步块和方法中才能调用wait/notify等方法）， monitorexit<ul><li>lock是具体类（java.util.concurrent.locks.Lock）是API层面的锁</li></ul></li></ul></li><li><p>使用方法：</p><ul><li>synchronized不需要用户手动释放锁，当synchronized代码执行完后，系统会自动让线程释放对锁的占用   </li><li>ReentrantLock则需要用户手动释放锁，若没有主动释放，就有可能出现死锁的情况，需要lock()和unlock()方法配合try/finally语句块来完成</li></ul></li><li><p>等待是否可中断：</p><ul><li>synchronized不可中断，除非抛出异常或正常运行完成      <ul><li>ReentrantLock可中断，<br>（1）设置超时方法tryLock(long timeout, TimeUnit unit)<br>（2）LockInterruptibly()放在代码块中，调用interrupt()方法可中断</li></ul></li></ul></li><li><p>加锁是否公平：</p><ul><li>synchronized为非公平锁</li><li>ReentrantLock两者都可以，默认非公平锁，构造方法可传入boolean值，true为公平锁，false为非公平锁</li></ul></li><li><p>绑定多个条件的condition：</p><ul><li>synchronized没有</li><li>ReentrantLock可以实现分组唤醒需要被唤醒的线程，可以精确唤醒，而不是像synchronized要么随机唤醒一个线程，要么全部唤醒</li></ul></li></ol></li></ol><h2 id="三、Callable-接口"><a href="#三、Callable-接口" class="headerlink" title="三、Callable 接口"></a>三、Callable 接口</h2><h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么"></a>1. 是什么</h3><h4 id="1-1-面试题：获得多线程的方法几种？"><a href="#1-1-面试题：获得多线程的方法几种？" class="headerlink" title="1.1 面试题：获得多线程的方法几种？"></a>1.1 面试题：获得多线程的方法几种？</h4><p>错误回答：<br>（1）继承thread 类（2）runnable 接口<br>正确回答：<br>传统的是继承thread 类和实现runnable 接口，java5 以后又有实现callable 接口和java 的线程池获得。</p><h4 id="1-2-功能接口"><a href="#1-2-功能接口" class="headerlink" title="1.2 功能接口"></a>1.2 功能接口</h4><p>Callable 是一个功能接口，因此可以用作lambda 表达式或方法引用的赋值对象。</p><h3 id="2-与-runnable-对比"><a href="#2-与-runnable-对比" class="headerlink" title="2. 与 runnable 对比"></a>2. 与 runnable 对比</h3><ol><li>Callable有返回值</li><li>Callable会抛异常</li><li>接口实现的方法不同 call()和run()</li></ol><h3 id="3-如何使用"><a href="#3-如何使用" class="headerlink" title="3. 如何使用"></a>3. 如何使用</h3><h4 id="3-1-FutureTask"><a href="#3-1-FutureTask" class="headerlink" title="3.1 FutureTask"></a>3.1 FutureTask</h4><ul><li>FutureTask 未来的任务，用它就干一件事，异步调用。</li><li><p>main 方法就像一个冰糖葫芦，一个个方法由main 串起来。但解决不了一个问题：正常调用挂起堵塞问题</p><blockquote><p>例子：高考：会做的先做，不会的放在后面做</p></blockquote></li><li><p>在主线程中需要执行比较耗时的操作时，但又不想阻塞主线程时，可以把这些作业交给Future 对象在后台完成，当主线程将来需要时，就可以通过Future 对象获得后台作业的计算结果或者执行状态。</p></li><li>一般FutureTask 多用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果。</li><li>仅在计算完成时才能检索结果；如果计算尚未完成，则阻塞get 方法。一旦计算完成，就不能再重新开始或取消计算。get 方法而获取结果只有在计算完成时获取，否则会一直阻塞直到任务转入完成状态，然后会返回结果或者抛出异常。</li><li>只计算一次，且get 方法一般放到最后，若不放在最后一般使用 while (!futureTask.isDone()) 循环</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(new MyThread());</span><br><span class="line"></span><br><span class="line">//共用一个FutureTask只会进1次</span><br><span class="line">new Thread(futureTask,&quot;AA&quot;).start();</span><br><span class="line">new Thread(futureTask,&quot;BB&quot;).start();</span><br><span class="line">    </span><br><span class="line">int r2 = futureTask.get();</span><br></pre></td></tr></table></figure><h2 id="四、线程间的通信"><a href="#四、线程间的通信" class="headerlink" title="四、线程间的通信"></a>四、线程间的通信</h2><h3 id="1-线程间通信"><a href="#1-线程间通信" class="headerlink" title="1. 线程间通信"></a>1. 线程间通信</h3><p>（1）生产者+消费者<br>（2）通知等待唤醒机制</p><h3 id="2-synchronized-实现"><a href="#2-synchronized-实现" class="headerlink" title="2. synchronized 实现"></a>2. synchronized 实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void increment() throws InterruptedException&#123;</span><br><span class="line">    //1 判断</span><br><span class="line">    if(number !=0 ) &#123;</span><br><span class="line">        this.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    //2 干活</span><br><span class="line">    ++number;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+&quot;\t&quot;+number);</span><br><span class="line">    //3 通知</span><br><span class="line">    this.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-lock实现"><a href="#3-lock实现" class="headerlink" title="3. lock实现"></a>3. lock实现</h3><h4 id="3-1-对标synchronized"><a href="#3-1-对标synchronized" class="headerlink" title="3.1 对标synchronized"></a>3.1 对标synchronized</h4><p>synchronized———wait———notify<br>lock———await———signal</p><h4 id="3-2-condition"><a href="#3-2-condition" class="headerlink" title="3.2 condition"></a>3.2 condition</h4><p>synchronized没有，ReentrantLock可以实现分组唤醒需要被唤醒的线程，可以使用condition进行精确唤醒（<strong>有顺序通知，需要有标识位</strong>），而不是像synchronized要么随机唤醒一个线程，要么全部唤醒。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//1 判断</span><br><span class="line">while(number != 3)&#123; //number就是标识位</span><br><span class="line">    //A 就要停止</span><br><span class="line">    c3.await();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JUC简介
    
    </summary>
    
      <category term="JUC" scheme="http://yoursite.com/categories/JUC/"/>
    
    
      <category term="JUC" scheme="http://yoursite.com/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>Java阻塞队列：BlockingQueue</title>
    <link href="http://yoursite.com/2019/05/14/Java%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%EF%BC%9ABlockingQueue/"/>
    <id>http://yoursite.com/2019/05/14/Java阻塞队列：BlockingQueue/</id>
    <published>2019-05-14T14:01:17.000Z</published>
    <updated>2019-05-14T14:03:25.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阻塞队列：BlockingQueue"><a href="#阻塞队列：BlockingQueue" class="headerlink" title="阻塞队列：BlockingQueue"></a>阻塞队列：BlockingQueue</h2><p>阻塞队列是一种队列，一种可以在多线程环境下使用，并且支持阻塞等待的队列。也就是说，阻塞队列和一般的队列的区别就在于：</p><ul><li>多线程环境支持，多个线程可以安全的访问队列</li><li>支持生产和消费等待，多个线程之间互相配合，当队列为空的时候，消费线程会阻塞等待队列不为空；当队列满了的时候，生产线 程就会阻塞直到队列不满。</li></ul><h2 id="几种常用的阻塞队列"><a href="#几种常用的阻塞队列" class="headerlink" title="几种常用的阻塞队列"></a>几种常用的阻塞队列</h2><ul><li>ArrayBlockingQueue，基于数组结构的有界阻塞队列，按FIFO对元素进行排序</li><li>LinkedBlockingQueue，基于链表结构的阻塞队列，按FIFO对元素进行排序，有界但大小默认值为Integer.MAX_VALUE = 2 的 31 次方 - 1</li><li>LinkedBlockingDeque，基于链表结构的双端阻塞队列</li><li>LinkedTransferDeque，基于链表结构的无界阻塞队列</li><li>DelayQueue，使用优先级队列实现的延时无界阻塞队列</li><li>PriorityBlockingQueue，支持优先级排序的无界阻塞队列，在需要多线程支持、需要优先级队列支持的场景下会被运用</li><li>SynchronousQueue同步队列，一个不存储元素的阻塞队列，每个插入操作必须等另一个线程调用移出操作，否则插入操作会一致阻塞（单个元素的队列）</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>阻塞队列在java中的一种典型使用场景是线程池，在线程池中，当提交的任务不能被立即得到执行的时候，线程池就会将提交的任务放到一个阻塞的任务队列中来，比如下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class="line">       return new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                     0L, TimeUnit.MILLISECONDS,</span><br><span class="line">                                     new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>newFixedThreadPool使用了<strong>LinkedBlockingQueue</strong>这种阻塞队列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newCachedThreadPool() &#123;</span><br><span class="line">        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class="line">                                      60L, TimeUnit.SECONDS,</span><br><span class="line">                                      new SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>newCachedThreadPool使用了<strong>SynchronousQueue</strong>这种队列，这种队列的特点是不缓存数据，而是缓存线程，线程分为生产者线程和消费者线程，一个生产者线程和一个消费者线程是互补的，当一个生产者线程遇到一个消费者线程的时候就会直接进行数据交换，所以这种队列的技术点比较高，理解起来难度较大。一个线程只能缓存一个数据，当一个线程插入数据之后就会被阻塞，直到另外一个线程消费了其中的数据。</p><p>阻塞队列还提供了其他类型的队列，包括双端阻塞队列，延时阻塞队列，<strong>延时阻塞队列</strong>的使用可以在newScheduledThreadPool中找到，newScheduledThreadPool里面使用延时阻塞队列来调度周期性任务执行。</p><h2 id="BlockingQueue提供的一些方法"><a href="#BlockingQueue提供的一些方法" class="headerlink" title="BlockingQueue提供的一些方法"></a>BlockingQueue提供的一些方法</h2><p>根据插入和取出两种类型的操作，具体分为下面一些类型：<br>|操作类型| Throws Exception |Special Value|Blocks|Times out|<br>|–|–|–|–|–|<br>|插入| add(o) |offer(o)|put(o)|offer(o, timeout, unit)|<br>|取出(删除) | remove(o) |poll()|take()|poll(timeout, unit)|<br>|Examine(检查)| element() |peek()|not applicable|not applicable|</p><ul><li><strong>Throws Exception</strong> 类型的插入和取出在不能立即被执行的时候就会<strong>抛出异常</strong>。</li><li><strong>Special Value</strong> 类型的插入和取出在不能被立即执行的情况下会返回一个<strong>特殊的值（true 或者 false）</strong></li><li><strong>Blocked</strong> 类型的插入和取出操作在不能被立即执行的时候会<strong>阻塞线程</strong>直到可以操作的时候会被其他线程<strong>唤醒</strong></li><li><strong>Timed out</strong> 类型的插入和取出操作在不能立即执行的时候会<strong>被阻塞一定的时间</strong>，如果在指定的时间内没有被执行，那么会<strong>返回一个特殊值</strong></li></ul><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>ArrayBlockingQueue需要你提供数组的大小，下面是ArrayBlockingQueue提供的三个构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public ArrayBlockingQueue(int capacity): // 初始化数组大小</span><br><span class="line"></span><br><span class="line">public ArrayBlockingQueue(int capacity, boolean fair): //初始化数组大小，并且设定是否是fair模式</span><br><span class="line"> </span><br><span class="line">public ArrayBlockingQueue(int capacity, boolean fair, Collection&lt;? extends E&gt; c) //初始化数组大小，设置是否是fair模式，然后使用一个集合初始化阻塞队列</span><br></pre></td></tr></table></figure></p><p>在构造函数中有两个比较关键的参数，一个是capacity代表阻塞队列使用的数组的长度，另外一个是fair，代表阻塞队列的一种策略选择，用于构造用于线程同步的锁（ReentrantLock）是公平锁还是非公平锁，默认值为false，非公平锁</p><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p>SynchronousQueue不存在容量的说法，任何插入操作都需要等待其他线程来消费，否则就会阻塞等待，也就是说，生产线程生产出一条数据之后就要等待消费者线程来将其消费掉，才能继续生产数据，否则就会阻塞等待消费。</p><p>SynchronousQueue通过使用Transferer类的transfer(E e, boolean timed, long nanos)方法来完成数据交易操作，根据fair模式和non-fair模式有两种类型的Transferer，fair模式对应于TransferQueue，non-fair模式对应TransferStack。</p><h2 id="总结：为什么使用BlockingQueue"><a href="#总结：为什么使用BlockingQueue" class="headerlink" title="总结：为什么使用BlockingQueue"></a>总结：为什么使用BlockingQueue</h2><p>使用阻塞队列，程序员不再需要关心什么时候该阻塞/唤醒线程</p>]]></content>
    
    <summary type="html">
    
      Java阻塞队列：BlockingQueue
    
    </summary>
    
      <category term="阻塞队列" scheme="http://yoursite.com/categories/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    
    
      <category term="JUC" scheme="http://yoursite.com/tags/JUC/"/>
    
      <category term="阻塞队列" scheme="http://yoursite.com/tags/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>用ideal创建java项目，并添加maven管理</title>
    <link href="http://yoursite.com/2019/05/13/%E7%94%A8ideal%E5%88%9B%E5%BB%BAjava%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E6%B7%BB%E5%8A%A0maven%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/05/13/用ideal创建java项目，并添加maven管理/</id>
    <published>2019-05-13T11:44:02.000Z</published>
    <updated>2019-05-13T11:49:08.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一步-创建项目"><a href="#第一步-创建项目" class="headerlink" title="第一步 创建项目"></a>第一步 创建项目</h2><p>File—&gt;New—&gt;Project</p><h2 id="第二步-修改项目结构"><a href="#第二步-修改项目结构" class="headerlink" title="第二步 修改项目结构"></a>第二步 修改项目结构</h2><p>在项目的src下面创建main/java和main/resources目录.</p><p>File—&gt;Project Structure 或者快捷键Ctrl+Shift+Alt+s.<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2zp18rt01j31060kowf5.jpg" alt=""><br>将Sources定位到java目录下，将Resources定位到resources下面.</p><p>此处补充idea下的java项目关于不同资源的标识符。</p><ul><li>Sources 一般用于标注类似 src 这种可编译目录。有时候我们不单单项目的 src 目录要可编译，还有其他一些特别的目录也许我们也要作为可编译的目录，就需要对该目录进行此标注。只有 Sources 这种可编译目录才可以新建 Java 类和包，这一点需要牢记。</li><li>Tests 一般用于标注可编译的单元测试目录。在规范的 maven 项目结构中，顶级目录是src，maven 的 src 我们是不会设置为Sources 的，而是在其子目录 main 目录下的 java 目录，我们会设置为 Sources。而单元测试的目录是 src - test - java，这里的 java 目录我们就会设置为 Tests，表示该目录是作为可编译的单元测试目录。一般这个和后面几个我们都是在 maven 项目下进行配置的，但是我这里还是会先说说。从这一点我们也可以看出 IntelliJ IDEA 对 maven 项目的支持是比彻底的。</li><li>Resources 一般用于标注资源文件目录。在 maven 项目下，资源目录是单独划分出来的，其目录为：src - main -resources，这里的 resources 目录我们就会设置为 Resources，表示该目录是作为资源目录。资源目录下的文件是会被编译到输出目录下的。</li><li>Test Resources 一般用于标注单元测试的资源文件目录。在 maven 项目下，单元测试的资源目录是单独划分出来的，其目录为：src - test -resources，这里的 resources 目录我们就会设置为 Test Resources，表示该目录是作为单元测试的资源目录。资源目录下的文件是会被编译到输出目录下的。</li><li>Excluded 一般用于标注排除目录。被排除的目录不会被 IntelliJ IDEA 创建索引，相当于被 IntelliJ IDEA 废弃，该目录下的代码文件是不具备代码检查和智能提示等常规代码功能。</li><li>通过上面的介绍，我们知道对于非 maven 项目我们只要会设置 src 即可。<h2 id="第三步-添加maven管理"><a href="#第三步-添加maven管理" class="headerlink" title="第三步 添加maven管理"></a>第三步 添加maven管理</h2>选中项目——&gt;右键——&gt;选择Add Framworks Support——&gt;选择maven</li></ul><p>此时就会生成pom.xml文件，可以在该文件里面添加项目的依赖了</p>]]></content>
    
    <summary type="html">
    
      用ideal创建java项目，并添加maven管理
    
    </summary>
    
      <category term="Ideal" scheme="http://yoursite.com/categories/Ideal/"/>
    
    
      <category term="Ideal" scheme="http://yoursite.com/tags/Ideal/"/>
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>JUC的几个常用辅助类</title>
    <link href="http://yoursite.com/2019/05/13/JUC%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E8%BE%85%E5%8A%A9%E7%B1%BB/"/>
    <id>http://yoursite.com/2019/05/13/JUC的几个常用辅助类/</id>
    <published>2019-05-13T11:43:43.000Z</published>
    <updated>2019-05-13T11:51:21.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ReentrantReadWriteLock-读写锁"><a href="#1-ReentrantReadWriteLock-读写锁" class="headerlink" title="1. ReentrantReadWriteLock 读写锁"></a>1. ReentrantReadWriteLock 读写锁</h2><ul><li>多个线程同时读一个资源类没有问题，所以为了满足并发量，读取共享资源应该可以同时进行。</li><li>但是写共享资源只能有一个线程。</li><li><p>写操作：原子+独占，整个过程必须是一个完整的统一体，中间不许被分割，被打断。</p><p>总结：</p></li><li>读-读可以共存</li><li>读-写不可以共存</li><li>写-写不可以共存</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">写锁</span><br><span class="line">reentrantReadWriteLock.writeLock().lock();</span><br><span class="line">reentrantReadWriteLock.writeLock().unlock();</span><br><span class="line"></span><br><span class="line">读锁</span><br><span class="line">reentrantReadWriteLock.readLock().lock();</span><br><span class="line">reentrantReadWriteLock.readLock().unlock();</span><br></pre></td></tr></table></figure><h2 id="2-CountDownLatch-减少计数"><a href="#2-CountDownLatch-减少计数" class="headerlink" title="2. CountDownLatch 减少计数"></a>2. CountDownLatch 减少计数</h2><ul><li>CountDownLatch 主要有两个方法，当一个或多个线程调用await 方法时，这些线程会阻塞。</li><li>其它线程调用countDown 方法会将计数器减1(调用countDown 方法的线程不会阻塞)，当计数器的值变为0 时，因await 方法阻塞的线程会被唤醒，继续执行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//自定义计数值</span><br><span class="line">java.util.concurrent.CountDownLatch countDownLatch = new java.util.concurrent.CountDownLatch(6);</span><br><span class="line">//计数值减1</span><br><span class="line">countDownLatch.countDown();</span><br><span class="line">//线程阻塞</span><br><span class="line">countDownLatch.await();</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-CyclicBarrier-循环栅栏"><a href="#3-CyclicBarrier-循环栅栏" class="headerlink" title="3. CyclicBarrier 循环栅栏"></a>3. CyclicBarrier 循环栅栏</h2><ul><li>CyclicBarrier 的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞,直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。</li><li>线程进入屏障通过CyclicBarrier 的await()方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CyclicBarrier cyclicBarrier = new CyclicBarrier(7,()-&gt;&#123;System.out.println(&quot;召唤神龙&quot;);&#125;);</span><br><span class="line"></span><br><span class="line">cyclicBarrier.await();</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Semaphore-信号灯"><a href="#4-Semaphore-信号灯" class="headerlink" title="4. Semaphore 信号灯"></a>4. Semaphore 信号灯</h2><p>在信号量上我们定义两种操作：</p><ul><li>acquire（获取） 当一个线程调用acquire 操作时，它要么通过成功获取信号量（信号量减1），要么一直等下去，直到有线程释放信号量，或超时。</li><li>release（释放）实际上会将信号量的值加1，然后唤醒等待的线程。</li><li>信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Semaphore semaphore = new Semaphore(3);  //模拟3个车位</span><br><span class="line"></span><br><span class="line">semaphore.acquire();//获取</span><br><span class="line"></span><br><span class="line">semaphore.release();//释放</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JUC的几个常用辅助类:ReentrantReadWriteLock 读写锁, CountDownLatch 减少计数, CyclicBarrier 循环栅栏, 4. Semaphore 信号灯
    
    </summary>
    
      <category term="JUC" scheme="http://yoursite.com/categories/JUC/"/>
    
    
      <category term="JUC" scheme="http://yoursite.com/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>Java插件Lombok的介绍和使用方法</title>
    <link href="http://yoursite.com/2019/05/13/Java%E6%8F%92%E4%BB%B6Lombok%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/05/13/Java插件Lombok的介绍和使用方法/</id>
    <published>2019-05-13T11:43:23.000Z</published>
    <updated>2019-05-13T11:47:43.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Lombok背景介绍"><a href="#1-Lombok背景介绍" class="headerlink" title="1. Lombok背景介绍"></a>1. Lombok背景介绍</h2><p>官方介绍如下：</p><blockquote><p>Project Lombok makes java a spicier language by adding ‘handlers’ that know how to build and compile simple, boilerplate-free, not-quite-java code.<br>大致意思是Lombok通过增加一些“处理程序”，可以让java变得简洁、快速。</p></blockquote><h2 id="2-Lombok使用方法"><a href="#2-Lombok使用方法" class="headerlink" title="2. Lombok使用方法"></a>2. Lombok使用方法</h2><p>Lombok能以简单的<strong>注解形式</strong>来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter/setter，也许还要去写构造器、equals等方法，而且需要维护，当属性多时会出现大量的getter/setter方法，这些显得很冗长也没有太多技术含量，一旦修改属性，就容易出现忘记修改对应方法的失误。</p><p>Lombok能通过注解的方式，<strong>在编译时自动为属性生成构造器、getter/setter、equals、hashcode、toString方法</strong>。出现的神奇就是在源码中没有getter和setter方法，但是在编译生成的字节码文件中有getter和setter方法。这样就省去了手动重建这些代码的麻烦，使代码看起来更简洁些。</p><p>Lombok的使用跟引用jar包一样，可以在官网（<a href="https://projectlombok.org/download" target="_blank" rel="noopener">https://projectlombok.org/download</a>）下载jar包，也可以使用maven添加依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.16.20&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2-1-Data"><a href="#2-1-Data" class="headerlink" title="2.1 @Data"></a>2.1 @Data</h3><p>@Data注解在类上，会为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。</p><h3 id="2-2-Getter-Setter"><a href="#2-2-Getter-Setter" class="headerlink" title="2.2 @Getter/@Setter"></a>2.2 @Getter/@Setter</h3><p>如果觉得@Data太过残暴（因为@Data集合了@ToString、@EqualsAndHashCode、@Getter/@Setter、@RequiredArgsConstructor的所有特性）不够精细，可以使用@Getter/@Setter注解，此注解在属性上，可以为相应的属性自动生成Getter/Setter方法。</p><h3 id="2-3-NonNull"><a href="#2-3-NonNull" class="headerlink" title="2.3 @NonNull"></a>2.3 @NonNull</h3><p>该注解用在属性或构造器上，Lombok会生成一个非空的声明，可用于校验参数，能帮助避免空指针。</p><p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import lombok.NonNull;</span><br><span class="line"></span><br><span class="line">public class NonNullExample extends Something &#123;</span><br><span class="line">  private String name;</span><br><span class="line">  </span><br><span class="line">  public NonNullExample(@NonNull Person person) &#123;</span><br><span class="line">    super(&quot;Hello&quot;);</span><br><span class="line">    this.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不使用Lombok：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import lombok.NonNull;</span><br><span class="line"></span><br><span class="line">public class NonNullExample extends Something &#123;</span><br><span class="line">  private String name;</span><br><span class="line">  </span><br><span class="line">  public NonNullExample(@NonNull Person person) &#123;</span><br><span class="line">    super(&quot;Hello&quot;);</span><br><span class="line">    if (person == null) &#123;</span><br><span class="line">      throw new NullPointerException(&quot;person&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    this.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-4-Cleanup"><a href="#2-4-Cleanup" class="headerlink" title="2.4 @Cleanup"></a>2.4 @Cleanup</h3><p>该注解能帮助我们自动调用close()方法，很大的简化了代码。</p><p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import lombok.Cleanup;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class CleanupExample &#123;</span><br><span class="line">  public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    @Cleanup InputStream in = new FileInputStream(args[0]);</span><br><span class="line">    @Cleanup OutputStream out = new FileOutputStream(args[1]);</span><br><span class="line">    byte[] b = new byte[10000];</span><br><span class="line">    while (true) &#123;</span><br><span class="line">      int r = in.read(b);</span><br><span class="line">      if (r == -1) break;</span><br><span class="line">      out.write(b, 0, r);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不使用Lombok：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class CleanupExample &#123;</span><br><span class="line">  public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    InputStream in = new FileInputStream(args[0]);</span><br><span class="line">    try &#123;</span><br><span class="line">      OutputStream out = new FileOutputStream(args[1]);</span><br><span class="line">      try &#123;</span><br><span class="line">        byte[] b = new byte[10000];</span><br><span class="line">        while (true) &#123;</span><br><span class="line">          int r = in.read(b);</span><br><span class="line">          if (r == -1) break;</span><br><span class="line">          out.write(b, 0, r);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">        if (out != null) &#123;</span><br><span class="line">          out.close();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      if (in != null) &#123;</span><br><span class="line">        in.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-EqualsAndHashCode"><a href="#2-5-EqualsAndHashCode" class="headerlink" title="2.5 @EqualsAndHashCode"></a>2.5 @EqualsAndHashCode</h3><p>默认情况下，会使用所有非静态（non-static）和非瞬态（non-transient）属性来生成equals和hasCode，也能通过exclude注解来排除一些属性。</p><p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line">@EqualsAndHashCode(exclude=&#123;&quot;id&quot;, &quot;shape&quot;&#125;)</span><br><span class="line">public class EqualsAndHashCodeExample &#123;</span><br><span class="line">  private transient int transientVar = 10;</span><br><span class="line">  private String name;</span><br><span class="line">  private double score;</span><br><span class="line">  private Shape shape = new Square(5, 10);</span><br><span class="line">  private String[] tags;</span><br><span class="line">  private int id;</span><br><span class="line">  </span><br><span class="line">  public String getName() &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @EqualsAndHashCode(callSuper=true)</span><br><span class="line">  public static class Square extends Shape &#123;</span><br><span class="line">    private final int width, height;</span><br><span class="line">    </span><br><span class="line">    public Square(int width, int height) &#123;</span><br><span class="line">      this.width = width;</span><br><span class="line">      this.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-6-ToString"><a href="#2-6-ToString" class="headerlink" title="2.6 @ToString"></a>2.6 @ToString</h3><p>类使用@ToString注解，Lombok会生成一个toString()方法，默认情况下，会输出类名、所有属性（会按照属性定义顺序），用逗号来分割。</p><p>通过将includeFieldNames参数设为true，就能明确的输出toString()属性。这一点是不是有点绕口，通过代码来看会更清晰些。</p><p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import lombok.ToString;</span><br><span class="line"></span><br><span class="line">@ToString(exclude=&quot;id&quot;)</span><br><span class="line">public class ToStringExample &#123;</span><br><span class="line">  private static final int STATIC_VAR = 10;</span><br><span class="line">  private String name;</span><br><span class="line">  private Shape shape = new Square(5, 10);</span><br><span class="line">  private String[] tags;</span><br><span class="line">  private int id;</span><br><span class="line">  </span><br><span class="line">  public String getName() &#123;</span><br><span class="line">    return this.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @ToString(callSuper=true, includeFieldNames=true)</span><br><span class="line">  public static class Square extends Shape &#123;</span><br><span class="line">    private final int width, height;</span><br><span class="line">    </span><br><span class="line">    public Square(int width, int height) &#123;</span><br><span class="line">      this.width = width;</span><br><span class="line">      this.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不使用Lombok：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class ToStringExample &#123;</span><br><span class="line">  private static final int STATIC_VAR = 10;</span><br><span class="line">  private String name;</span><br><span class="line">  private Shape shape = new Square(5, 10);</span><br><span class="line">  private String[] tags;</span><br><span class="line">  private int id;</span><br><span class="line">  </span><br><span class="line">  public String getName() &#123;</span><br><span class="line">    return this.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public static class Square extends Shape &#123;</span><br><span class="line">    private final int width, height;</span><br><span class="line">    </span><br><span class="line">    public Square(int width, int height) &#123;</span><br><span class="line">      this.width = width;</span><br><span class="line">      this.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override public String toString() &#123;</span><br><span class="line">      return &quot;Square(super=&quot; + super.toString() + &quot;, width=&quot; + this.width + &quot;, height=&quot; + this.height + &quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @Override public String toString() &#123;</span><br><span class="line">    return &quot;ToStringExample(&quot; + this.getName() + &quot;, &quot; + this.shape + &quot;, &quot; + Arrays.deepToString(this.tags) + &quot;)&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor"><a href="#2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor" class="headerlink" title="2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor"></a>2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</h3><p>无参构造器、部分参数构造器、全参构造器。Lombok没法实现多种参数构造器的重载。</p><p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import lombok.AccessLevel;</span><br><span class="line">import lombok.RequiredArgsConstructor;</span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.NonNull;</span><br><span class="line"></span><br><span class="line">@RequiredArgsConstructor(staticName = &quot;of&quot;)</span><br><span class="line">@AllArgsConstructor(access = AccessLevel.PROTECTED)</span><br><span class="line">public class ConstructorExample&lt;T&gt; &#123;</span><br><span class="line">  private int x, y;</span><br><span class="line">  @NonNull private T description;</span><br><span class="line">  </span><br><span class="line">  @NoArgsConstructor</span><br><span class="line">  public static class NoArgsExample &#123;</span><br><span class="line">    @NonNull private String field;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不使用Lombok：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> public class ConstructorExample&lt;T&gt; &#123;</span><br><span class="line">  private int x, y;</span><br><span class="line">  @NonNull private T description;</span><br><span class="line">  </span><br><span class="line">  private ConstructorExample(T description) &#123;</span><br><span class="line">    if (description == null) throw new NullPointerException(&quot;description&quot;);</span><br><span class="line">    this.description = description;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public static &lt;T&gt; ConstructorExample&lt;T&gt; of(T description) &#123;</span><br><span class="line">    return new ConstructorExample&lt;T&gt;(description);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @java.beans.ConstructorProperties(&#123;&quot;x&quot;, &quot;y&quot;, &quot;description&quot;&#125;)</span><br><span class="line">  protected ConstructorExample(int x, int y, T description) &#123;</span><br><span class="line">    if (description == null) throw new NullPointerException(&quot;description&quot;);</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">    this.description = description;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public static class NoArgsExample &#123;</span><br><span class="line">    @NonNull private String field;</span><br><span class="line">    </span><br><span class="line">    public NoArgsExample() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-Idea下安装Lombok插件"><a href="#4-Idea下安装Lombok插件" class="headerlink" title="4. Idea下安装Lombok插件"></a>4. Idea下安装Lombok插件</h2><p>可直接通过搜索获取<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2zro1xj2oj30tl0jgtbq.jpg" alt=""><br>另外还有一个关键点：<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2zrsvsv66j30zw0bk0v3.jpg" alt=""><br>接下来就可以编码了<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2zrt7mtfyj31bu0yc146.jpg" alt=""></p><h2 id="5-Lombok的优缺点"><a href="#5-Lombok的优缺点" class="headerlink" title="5. Lombok的优缺点"></a>5. Lombok的优缺点</h2><p>优点：</p><ul><li>能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率</li><li>让代码变得简洁，不用过多的去关注相应的方法</li><li>属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等</li></ul><p>缺点：</p><ul><li>不支持多种参数构造器的重载</li><li>虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</li></ul><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>Lombok虽然有很多优点，但Lombok更类似于一种IDE插件，项目也需要依赖相应的jar包。</p><p>Lombok依赖jar包是因为编译时要用它的注解，为什么说它又类似插件？因为在使用时，eclipse或IntelliJ IDEA都需要安装相应的插件，在编译器编译时通过操作AST（抽象语法树）改变字节码生成，变向的就是说它在改变java语法。它不像spring的依赖注入或者mybatis的ORM一样是运行时的特性，而是编译时的特性。这里我个人最感觉不爽的地方就是对插件的依赖！因为Lombok只是省去了一些人工生成代码的麻烦，但IDE都有快捷键来协助生成getter/setter等方法，也非常方便。</p>]]></content>
    
    <summary type="html">
    
      Java插件Lombok的介绍和使用方法
    
    </summary>
    
      <category term="Lombok" scheme="http://yoursite.com/categories/Lombok/"/>
    
    
      <category term="Ideal" scheme="http://yoursite.com/tags/Ideal/"/>
    
      <category term="Lombok" scheme="http://yoursite.com/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>ideal如何自定义模板</title>
    <link href="http://yoursite.com/2019/05/13/ideal%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yoursite.com/2019/05/13/ideal如何自定义模板/</id>
    <published>2019-05-13T11:43:11.000Z</published>
    <updated>2019-05-13T11:45:39.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于模板-Template"><a href="#关于模板-Template" class="headerlink" title="关于模板(Template)"></a>关于模板(Template)</h2><blockquote><p>( Editor - Live Templates 和 Editor - General - Postfix Completion )</p></blockquote><h3 id="1-Live-Templates-实时代码模板-功能介绍"><a href="#1-Live-Templates-实时代码模板-功能介绍" class="headerlink" title="1. Live Templates(实时代码模板)功能介绍"></a>1. Live Templates(实时代码模板)功能介绍</h3><p>它的原理就是配置一些常用代码字母缩写，在输入简时可以出现你预定义的固定模式的代码，使得开发效率大提高 ，同时也可以增加个性化 。最简单的例子 就是在Java中输入sout会出现System.out.println();</p><h3 id="2-已有的常用模板"><a href="#2-已有的常用模板" class="headerlink" title="2. 已有的常用模板"></a>2. 已有的常用模板</h3><p><strong>Postfix Completion 默认如下：</strong><br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2zqzumrjnj30j40g6dhp.jpg" alt=""><br><strong>Live Templates 默认如下：</strong><br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2zr14wmdcj30mb0bydgq.jpg" alt=""><br>二者的区别：Live Templates 可以自定义，而 Postfix Completion 不行。有些操作二者都提供了模板，但Postfix Completion 较之 Live Templates 快0.01S。</p><p>举例：</p><ul><li>fori：可生成for循环</li><li>iter：可生成增强型for循环</li><li>itar：可生成普通for循环</li><li>list.for：可生成集合list的for循环，又如：list.fori 或 list.forr</li><li>ifn：可生成if(xxx = null)</li><li>prsf：可生成private static final</li></ul><h2 id="3-自定义模板"><a href="#3-自定义模板" class="headerlink" title="3. 自定义模板"></a>3. 自定义模板</h2><p>先定义一个模板的分组：<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2zrau8uirj30oe09g75r.jpg" alt=""><br>选中自定义的模板组，点击“+”来定义模板<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2zrbx61caj30ix07a74p.jpg" alt=""><br>自定义步骤如下：<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2zrd75ervj30k20bagmc.jpg" alt=""></p><ol><li>Abbreviation：模板的缩写</li><li>Description：模板的描述</li><li>Template text：模板的代码片段</li><li>Define：应用范围</li></ol>]]></content>
    
    <summary type="html">
    
      IDEA如何自定义模板
    
    </summary>
    
      <category term="Ideal" scheme="http://yoursite.com/categories/Ideal/"/>
    
    
      <category term="Ideal" scheme="http://yoursite.com/tags/Ideal/"/>
    
  </entry>
  
  <entry>
    <title>Redis初探</title>
    <link href="http://yoursite.com/2019/05/10/Redis%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2019/05/10/Redis初探/</id>
    <published>2019-05-10T03:36:49.000Z</published>
    <updated>2019-05-10T03:38:22.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sql对比NoSql"><a href="#Sql对比NoSql" class="headerlink" title="Sql对比NoSql"></a>Sql对比NoSql</h2><p>Sql：</p><ul><li>访问和处理关系数据库的计算机标准语言。mysql数据库，数据库以“文件形式存储在硬盘”里边。</li></ul><p>NoSql：</p><ul><li><strong>CAP： 强一致性（C），可用性（A），分区容错性（P）</strong></li><li>CAP核心理论：最多只能很好的满足两个特性</li><li>CAP的3进2：分区容错性必须要实现，只能在一致性和可用性之间权衡</li><li><strong>redis：CP</strong></li><li>网站架构的大多选择：AP</li></ul><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="1-什么是Redis"><a href="#1-什么是Redis" class="headerlink" title="1.  什么是Redis"></a>1.  什么是Redis</h3><p>Redis是远程数据服务，内存高速缓存数据库，支持丰富的数据结构，如String、list、hash、set、sorted set，可持久化，保证了数据安全。<strong>Redis是做数据缓存的。</strong></p><p>缓存有两种类型：数据缓存、页面缓存</p><p>使用缓存减轻数据库的负载。</p><p>在开发的时候如果有一些数据在短时间之内不会发生变化，而他们还要被频繁的访问，为了提高用户的请求速度和降低网站的负载，就把这些数据放到一个读取速度更快的介质上（或者是通过较少的计算量就可以获得该数据），该行为就称作对该数据的缓存。</p><p>该介质可以是文件、数据库、内存，内存经常用于数据缓存。</p><p>缓存的两种形式：<br> <font color="#DC143C">页面缓存</font>经常用在CMS内存管理系统里边<br> <font color="#DC143C">数据缓存</font>经常用于页面的具体数据里边</p><p>新闻页面（内容单一，集中）适合做页面缓存<br>商品页面的组成部分根据业务特点，各个部分数据比较独立，适合给他们分别做数据缓存。</p><h3 id="2-redis和memcache比较"><a href="#2-redis和memcache比较" class="headerlink" title="2.  redis和memcache比较"></a>2.  redis和memcache比较</h3><ul><li>Redis和Memcache都是将数据存放在内存中，都是<strong>内存数据库</strong>。不过memcache还可用于缓存其他东西，例如图片、视频等等。</li><li>Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持master-slave（主从）模型应用</li><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用</li><li>Redis单个value的最大限制是1GB，memcached只能保存1MB的数据。</li><li>在Redis中，<strong>并不是所有的数据都一直存储在内存中</strong>的。这是和Memcached相比一个最大的区别（我个人是这么认为的）。</li></ul><h3 id="3-redis常见使用场景"><a href="#3-redis常见使用场景" class="headerlink" title="3.  redis常见使用场景"></a>3.  redis常见使用场景</h3><ul><li>会话缓存（最常用）</li><li>消息队列（如支付）</li><li>活动排行榜或计数</li><li>发布、订阅消息（消息通知）</li><li>商品列表，评论列表</li></ul><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><h3 id="1-key的操作"><a href="#1-key的操作" class="headerlink" title="1.  key的操作"></a>1.  key的操作</h3><p>在redis里边，除了“\n”和空格不能作为名字的组成部分，其他内容都可以作为key的名字部分。名字长度不作要求。</p><h3 id="2-String类型操作"><a href="#2-String类型操作" class="headerlink" title="2.  String类型操作"></a>2.  String类型操作</h3><ul><li>String是redis最基本的类型</li><li>Redis的string可以包含任何数据。包括jpg图片或者序列化对象</li><li>单个value值最大上限是1G字节</li><li><p>如果只用string类型，redis就可以被看做加上持久化特性的memcache</p></li><li><p><font color="#DC143C">incr</font>：increament增长</p><pre><code>该指令可以对key进行累加1操作，默认是累加1操作，类似i++操作该指令可以针对**新key**或**已有key**进行操作新key：创建该key并累加1，其值为1已有key：key的信息值类型要求必须为整型的</code></pre></li><li><p><font color="#DC143C">decr</font>的操作模式与incr一致，不过其是减1操作</p></li><li><p><font color="#DC143C">substr</font>：对内容进行截取，包括<strong>start</strong>和<strong>end</strong>标记位置</p></li></ul><h3 id="3-数据类型List链表"><a href="#3-数据类型List链表" class="headerlink" title="3.  数据类型List链表"></a>3.  数据类型List链表</h3><p>list类型其实就是一个双向链表。通过push，pop操作从链表的头部或者尾部添加删除元素。这使得list既可以用作栈，也可以用作队列。</p><p>List类型操作：</p><ul><li><strong>lpush key string</strong>：在key对应list的头部添加字符串元素</li><li><strong>rpop key</strong>：从list的尾部删除元素，并返回删除元素</li><li><strong>llen key</strong> 返回 key：对应list的长度，key不存在返回0，如果key对应key不是list返回错误</li><li><strong>lrange key start end</strong>：返回指定区间内的元素，下标从0开始</li><li><strong>rpush key string</strong>：同上，在尾部添加</li><li><strong>lpop key</strong>：从list的头部删除元素，并返回删除元素</li><li><strong>ltrim key start end</strong>：截取list，保留指定区间内元素</li></ul><p><strong><em>list链表类型应用场合：</em></strong></p><p><font color="#DC143C">获得最新的10个登录用户信息</font>：select * from user order by logintime desc limit 10；<br>    以上sql语句可以实现用户需求，但是数据多的时候，全部数据都要受到影响，对数据库的复杂比较高。必要情况还需要给关键字段（id或logintime）设置索引，索引也比较耗费系统资源。<br>    如果通过list链表实现以上功能，可以在list链表中只保留最新的10个数据，每进来一个新数据就删除一个旧数据。每次就可以从链表中直接获得需要的数据。极大节省各方面资源消耗。</p><h3 id="4-set集合类型"><a href="#4-set集合类型" class="headerlink" title="4.  set集合类型"></a>4.  set集合类型</h3><ul><li>redis的set是string类型的<strong>无序集合</strong>。</li><li>set元素最大可以包含（2的32次方-1）个元素</li><li>关于set集合类型除了基本的添加删除操作，其他有用的操作还包括集合的取<strong>并集，交集，差集</strong>。通过这些操作可以很容易的实现sns的<font color="#DC143C">好友推荐功能</font>。</li><li>注意：每个集合中的<strong>各个元素不能重复</strong></li></ul><p>set类型操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">·sadd key member：添加一个string元素到key对应的set集合中，成功返回1，如果元素已经在                        set集合中，返回0，key对应的set不存在返回错误。</span><br><span class="line">·sren key member [member]:从key对应set中移除给定元素，成功返回1</span><br><span class="line">·smove p1 p2 member：从p1对应set中移除member并添加到p2对应set中</span><br><span class="line">·scard key：返回set元素个数</span><br><span class="line">·sismember key member：判断set的元素个数</span><br><span class="line">·sinter key1 key2...keyN：返回所有给定key的交集</span><br><span class="line">·sunion key1 key2...keyN：返回所有给定并集</span><br><span class="line">·sdiff key1 key2...keyN:返回所有给定key的差集</span><br><span class="line">·smembers key：返回key对应set的所有元素，结果是无序的。</span><br></pre></td></tr></table></figure></p><p><strong><em>set类型应用场合</em></strong>：<strong>qq好友推荐</strong></p><p>Tom朋友圈（与某某是好友）：mary jack xiaoming wang5 wang6<br>Linken朋友圈（与某某是好友）：yuehan daxiang luce wang5 wang6<br>创建Tom的朋友圈：<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2w118a1w8j309104kmx4.jpg" alt=""><br>创建linken朋友圈：<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2w149rpwxj309y06c0sr.jpg" alt=""><br>对两个set取交集和并集：<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2w14svm04j309w049749.jpg" alt=""><br>取差集：<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2w151cr1pj309i03o0so.jpg" alt=""></p><h3 id="5-Sort-Set排序集合类型"><a href="#5-Sort-Set排序集合类型" class="headerlink" title="5.  Sort Set排序集合类型"></a>5.  Sort Set排序集合类型</h3><ul><li>和set一样sorted set也是string类型元素的集合，不同的是每个元素都会关联一个<strong>权</strong>。通过<strong>权值</strong>可以有序的获取集合中的元素。</li><li>排序集合中的每个元素都是<strong>值、权的组合</strong>，之前的set集合类型每个元素就只有一个值。</li></ul><p>sort set排序类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">·zadd key score member：添加元素到集合，元素在集合中存在则更新对应score。</span><br><span class="line">·zren key member：删除指定元素，1表示成功，如果元素不存在返回0</span><br><span class="line">·zincrby key incr member：按照incr幅度增加对应member的score值，返回score值</span><br><span class="line">·zrank key member：返回指定元素在集合中的排名（下标），集合中元素是按score从小到大排序      的。</span><br><span class="line">·zrevrank key member：同上，但是集合中元素是按score从大到小排序的</span><br><span class="line">·zrange key start end：类似lrange操作从集合中去指定区间的元素。返回的是有序结果</span><br><span class="line">·zrevrange key start end：同上，返回结果是按score逆序的。</span><br><span class="line">·zcard key：返回集合中元素个数。</span><br><span class="line">·zscore key element：返回给定元素对应的score</span><br><span class="line">·zrenrangeburank key min max：删除集合中排名在给定区间的元素。</span><br></pre></td></tr></table></figure></p><p><strong><em>Sort set类型适合场合：</em></strong></p><p><font color="#DC143C">获得热门帖子（回复量）信息</font>：select * from message order by backnum desc limit 5；（以上需求可以通过简单的sql语句实现，但是sql语句比较耗费mysql数据库资源）</p><p>案例：获得热门帖子信息（前5）：<br>我们只做一个sort set排序集合，里边只保留5个元素信息，该5个元素是回复量最高的每个帖子被回复的时候，都有机会进入该集合里边，但是只有回复量最高的前5个帖子会存在于该集合，回复量低的就被删除。</p><h3 id="6-数据类型Hash"><a href="#6-数据类型Hash" class="headerlink" title="6.  数据类型Hash"></a>6.  数据类型Hash</h3><ul><li>是一个键值对集合，是string类型的field和value的映射表，适合<strong>存储对象</strong></li><li>hash数据类型存储的数据与mysql数据库中存储的一条记录极为相似。</li></ul><h2 id="持久化功能"><a href="#持久化功能" class="headerlink" title="持久化功能"></a>持久化功能</h2><p>Redis为了内部数据的安全考虑，会把本身的数据以<strong>文件</strong>形式保存到硬盘中一份，在服务器重启之后会把硬盘的数据恢复到内存（redis）的里边。</p><p>数据保存到硬盘的过程就称为“持久化”效果。</p><h3 id="1-snap-shotting快照持久化（RDB持久化）（保存结果）"><a href="#1-snap-shotting快照持久化（RDB持久化）（保存结果）" class="headerlink" title="1.  snap shotting快照持久化（RDB持久化）（保存结果）"></a>1.  snap shotting快照持久化（RDB持久化）（保存结果）</h3><ul><li>该持久化默认开启，一次性把redis中全部的数据保存一份存储到硬盘中，适合大规模数据恢复，但数据一致性和完整性差</li><li>手动发起快照持久化指令：<strong>bgsave</strong>指令</li><li>默认的文件名为：<strong>dump.rdb</strong></li><li>快照持久化的备份频率：<br>save 900 1 #900秒内如果超过1个key被修改，则发起快照保存<br>save 300 10 #300秒超过10个key被修改，发起快照保存<br>save 60 10000 #60秒超过10000个key被修改，发起快照保存</li></ul><h3 id="2-append-only-file（AOF持久化）（保存操作）"><a href="#2-append-only-file（AOF持久化）（保存操作）" class="headerlink" title="2.  append only file（AOF持久化）（保存操作）"></a>2.  append only file（AOF持久化）（保存操作）</h3><ul><li>本质：把用户执行的每个“写”指令（添加、删除、修改）都备份到文件中，还原数据的时候就是执行具体写指令而已。</li><li>开启AOF持久化（会清空redis内部的数据）</li><li>默认没有开启</li><li>手动开启，完整性高，但内容较多的情况下会影响恢复效率</li></ul><h3 id="3-应用场合"><a href="#3-应用场合" class="headerlink" title="3.  应用场合"></a>3.  应用场合</h3><ul><li>若只是使用redis作为缓存，可关闭持久化</li><li>若使用持久化功能，rdb与aof都建议开启</li></ul><h3 id="4-RDB持久化和AOF持久化的对比"><a href="#4-RDB持久化和AOF持久化的对比" class="headerlink" title="4.  RDB持久化和AOF持久化的对比"></a>4.  RDB持久化和AOF持久化的对比</h3><p>RDB：</p><ul><li>优点：节省磁盘空间，恢复速度快</li><li>缺点：数据庞大时仍然消耗性能，如果redis down掉会丢失最后一次快照的所有更改</li></ul><p>AOF:</p><ul><li>优点：丢失数据概率更低，日志文件可读性高，可处理错误的操作</li><li>缺点 ：相比RDB更占空间，恢复/备份更慢，读写同步会有性能压力</li></ul><h2 id="主从模式-master—slave"><a href="#主从模式-master—slave" class="headerlink" title="主从模式 master—slave"></a>主从模式 master—slave</h2><ul><li>为了降低每个redis服务器的负载，可以多设置几个，并做主从模式，一个服务器负责“写”数据，其他服务器负责“读”数据，主服务器数据会“自动”同步给从服务器。</li><li>Slave服务器默认禁止写操作。</li></ul><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><ul><li>主从复制  <strong>作用：读写分离，容灾恢复</strong></li><li>配从不配主。常用三招：一主二仆、薪火相传、反客为主</li></ul><h3 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h3><ul><li>主从切换，多哨兵模式</li></ul>]]></content>
    
    <summary type="html">
    
      Redis初探
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="NoSql" scheme="http://yoursite.com/tags/NoSql/"/>
    
  </entry>
  
  <entry>
    <title>Ideal项目如何与github同步(pull,push)</title>
    <link href="http://yoursite.com/2019/05/09/Ideal%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E4%B8%8Egithub%E5%90%8C%E6%AD%A5-pull-push/"/>
    <id>http://yoursite.com/2019/05/09/Ideal项目如何与github同步-pull-push/</id>
    <published>2019-05-09T07:52:55.000Z</published>
    <updated>2019-05-09T07:55:11.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从GitHub更新项目到Ideal（pull）"><a href="#从GitHub更新项目到Ideal（pull）" class="headerlink" title="从GitHub更新项目到Ideal（pull）"></a>从GitHub更新项目到Ideal（pull）</h2><ol><li>右击项目名 –&gt; Git –&gt; Repository –&gt; pull</li></ol><h2 id="从Ideal更新项目到GitHub（push）"><a href="#从Ideal更新项目到GitHub（push）" class="headerlink" title="从Ideal更新项目到GitHub（push）"></a>从Ideal更新项目到GitHub（push）</h2><ol><li>右击项目名 –&gt; Git –&gt; commit diretory</li><li>右击项目名 –&gt; Git –&gt; Repository –&gt; push</li></ol>]]></content>
    
    <summary type="html">
    
      Ideal使用(pull,push)命令使本地项目与github端同步
    
    </summary>
    
      <category term="Ideal" scheme="http://yoursite.com/categories/Ideal/"/>
    
    
      <category term="Ideal" scheme="http://yoursite.com/tags/Ideal/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA新建Maven web项目</title>
    <link href="http://yoursite.com/2019/05/09/IntelliJ-IDEA%E6%96%B0%E5%BB%BAMaven-web%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/05/09/IntelliJ-IDEA新建Maven-web项目/</id>
    <published>2019-05-09T07:50:07.000Z</published>
    <updated>2019-05-09T07:56:36.217Z</updated>
    
    <content type="html"><![CDATA[<p>第一次使用Intellij idea，有诸多不熟悉，之处，网上很多教程千差万别，为日后少走弯路，特此记录。</p><p>步骤一：首先先创建一个project，打开-File-New-Project </p><p>步骤二：你要选择maven然后按照下面图片 的指示操作就可以了<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2v1hiedd3j30jv0g3q5d.jpg" alt=""><br>点击next按钮<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2v1iidlgtj30iw0670t3.jpg" alt=""><br>点击next，该图为示例图片，XX为你自己设置的项目名，如im，<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2v1jhtgvzj30me0iz3z4.jpg" alt=""><br>之后点击finish，等idea完全加载完成后，就可以看到项目已经生成了（有时也缺少下图中的resources目录，也需要手动创建）<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2v1la0jfjj30ic0h7ab6.jpg" alt=""><br>步骤三：配置tocat服务器。点击那个倒立的三角形，然后点击Edit Configurations<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2v1owauzdj30uc0k8q5s.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2v1p810f9j30uc0kj42c.jpg" alt=""><br>配置artifacts，标签由Server跳到Deploment，点击小铅笔一样的图标对artifacts进行配置<br><img src="http://ww1.sinaimg.cn/large/006pqaYvly1g2v1t6fu1mj30ty0o9wf7.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      IntelliJ IDEA新建Maven web项目并配置tomcat服务器
    
    </summary>
    
      <category term="Ideal" scheme="http://yoursite.com/categories/Ideal/"/>
    
    
      <category term="Ideal" scheme="http://yoursite.com/tags/Ideal/"/>
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Ideal上传本地项目至GitHub</title>
    <link href="http://yoursite.com/2019/05/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Ideal%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E8%87%B3GitHub/"/>
    <id>http://yoursite.com/2019/05/08/如何使用Ideal上传本地项目至GitHub/</id>
    <published>2019-05-08T12:46:30.000Z</published>
    <updated>2019-05-09T07:52:26.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA配置github并上传项目"><a href="#IDEA配置github并上传项目" class="headerlink" title="IDEA配置github并上传项目"></a>IDEA配置github并上传项目</h1><h2 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h2><ol><li><p>在github中创建一个账号：<a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">https://github.com/join?source=header-home</a></p></li><li><p>下载并安装git：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></li><li><p>安装成功后打开Git Bash，输入下列命令，设置git全局用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>在IDEA中设置Git，在File–&gt;Setting-&gt;Version Control–&gt;Git–&gt;Path to Git executable选择你的git安装后的git.exe文件，然后点击Test，测试是否设置成功<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2u6ku0q2ij30s70c9jsn.jpg" alt=""><br>要是在bin目录下没找到此exe，不妨看看cmd目录下面有没有，也就是c://~install/cmd/git.exe;</p></li><li><p>在IDEA中设置GitHub，File–&gt;Setting-&gt;Version Control–&gt;GibHub<br> Host：github.com<br> Token：点击Create API Token，输入在github中注册的用户名和密码生成token<br>　点击Test，测试是否连接成功<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2u6mtqppej30sb0d0jsj.jpg" alt=""></p></li><li>创建本地仓库，VCS–&gt;Import into Version Control–&gt;Create Git Repository…<br>(要给自己的项目建立一个git本地仓库,因为后面修改代码应当先上传到本地仓库，再从本地仓库上传到github上)<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2u6ow38xjj30s90ea0ua.jpg" alt="">在弹框中选中项目所在的位置，点击OK，此时项目文件全部变成红色（若选中其他位置，则git–&gt;add不可点选，不知为何）</li><li>上传项目到本地仓库，项目右键选择Git–&gt;add，此时项目文件变成绿色，此时文件只是处于暂存区，并没有真正进入到版本库（本地）中。(本步骤是接着第6步骤的，把代码add到暂存区当中)<img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2u6taf24bj30la0fjdi6.jpg" alt=""></li><li>项目右键Git–&gt; Commit Directory，在弹窗中输入Commit Message，点击commit，此时项目文件从暂存区真正进入版本库中，项目文件变成白色。<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2u6vkwmlhj30j40g0dhx.jpg" alt=""><br>(此步骤接着第7步骤，只有commint directory才是提交到本地仓库)<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2u6w9s6nvj30kw0mzgo6.jpg" alt=""></li><li>上传项目到GitHub中，VCS–&gt;Import into Version Control–&gt;Share Project on GitHub，在弹框中输入仓库名和描述，点击Share，即可是上传，中间会弹窗输入GitHub的用户名和密码（已输入过用户名和密码并记住的不会再次弹框输入），上传成功后IDEA右下角会给出提示<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2u6x0spe6j30bn0760su.jpg" alt=""></li><li>提交修改文件到GitHub<br>新增文件（红色），右键–&gt;Git–&gt;add，将新增的文件加入本地仓库，此时文件变绿色<br>修改文件（蓝色）<br>在项目右键–&gt;Git–&gt;Commit Directory，查看有变动的文件并输入Commit Message，点击Commit and Push…<br>提交后会进行语法检查，若存在错误或警告会给出确认提示，点击Commit，弹出Push框，点击Push，上传GitHub成功（因为此时是你自己的项目，所以有权限提交，一般git到别人的项目，应当叫别人给与权限你才能提交）<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2u701vzhhj30aa07q74h.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2u70li5i4j30l40mx76g.jpg" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      IDEA配置github并上传项目
    
    </summary>
    
      <category term="Ideal" scheme="http://yoursite.com/categories/Ideal/"/>
    
    
      <category term="Ideal" scheme="http://yoursite.com/tags/Ideal/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>数据库sql实战(2)</title>
    <link href="http://yoursite.com/2019/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93sql%E5%AE%9E%E6%88%98-2/"/>
    <id>http://yoursite.com/2019/05/07/数据库sql实战-2/</id>
    <published>2019-05-07T12:33:35.000Z</published>
    <updated>2019-05-07T12:34:35.055Z</updated>
    
    <content type="html"><![CDATA[<ol><li>获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dept_emp` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `dept_no` char(4) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `dept_manager` (</span><br><span class="line">    `dept_no` char(4) NOT NULL,</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`dept_no`));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, m.emp_no manager_no from dept_emp e inner join dept_manager m </span><br><span class="line">on e.dept_no = m.dept_no </span><br><span class="line"><span class="built_in">where</span> e.to_date=<span class="string">'9999-01-01'</span> and m.to_date=<span class="string">'9999-01-01'</span> and e.emp_no&lt;&gt;m.emp_no</span><br></pre></td></tr></table></figure><ul><li>用 INNER JOIN 连接两张表，因为要输出自己的经理，得知自己与经理的部门要相同，故有限制条件 de.dept_no = dm.dept_no</li><li>再用 WHERE 限制当前员工与当前经理的条件，即 dm.to_date 等于 ‘9999-01-01’ 、de.to_date 等于 ‘9999-01-01’ 、 de.emp_no 不等于 dm.emp_no <strong>(e.emp_no&lt;&gt;m.emp_no)</strong></li><li>为了增强代码可读性，将 dept_emp 用别名 de 代替，dept_manager 用 dm 代替，最后根据题意将 de.emp_no 用别名 manager_no 代替后输出</li></ul><hr><ol start="2"><li>获取所有部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dept_emp` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `dept_no` char(4) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `salary` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select e.dept_no, e.emp_no, max(s.salary) salary from dept_emp e inner join salaries s </span><br><span class="line">on e.emp_no = s.emp_no </span><br><span class="line"><span class="built_in">where</span> e.to_date = <span class="string">'9999-01-01'</span> and s.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line">group by e.dept_no</span><br></pre></td></tr></table></figure><ul><li>先用INNER JOIN连接两张表，限制条件是两张表的emp_no相同，即d.emp_no = s.emp_no；</li><li>选取每个员工当前的工资水平，用d.to_date = ‘9999-01-01’ AND s.to_date = ‘9999-01-01’作条件限制，因为此表中每条最新记录的 to_date 都用 9999-01-01 表示；</li><li>用GROUP BY d.dept_no将每个部门分为一组，用MAX()函数选取每组中工资最高者；</li></ul><hr><ol start="3"><li>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &quot;titles&quot; (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `title` varchar(50) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date DEFAULT NULL);</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select title, count(emp_no) t from titles </span><br><span class="line">group by title having t&gt;=2</span><br></pre></td></tr></table></figure><ul><li>用COUNT()函数和GROUP BY语句可以统计同一title值的记录条数</li><li>由于WHERE后不可跟COUNT()函数，故用<strong>HAVING</strong>语句来限定t&gt;=2的条件</li><li><strong>where</strong>和<strong>having</strong>的不同之处在于，where是查找之前的限定，而having是查找之后。</li></ul><hr><ol start="4"><li>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。注意对于重复的emp_no进行忽略。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select title, count(distinct emp_no) t from titles </span><br><span class="line">group by title having t&gt;=2</span><br></pre></td></tr></table></figure></li></ol><ul><li>和上一题类似，注意使用<strong>distinct</strong> 对重复的emp_no进行忽略</li></ul><hr><ol start="5"><li>查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `employees` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `birth_date` date NOT NULL,</span><br><span class="line">    `first_name` varchar(14) NOT NULL,</span><br><span class="line">    `last_name` varchar(16) NOT NULL,</span><br><span class="line">    `gender` char(1) NOT NULL,</span><br><span class="line">    `hire_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from employees </span><br><span class="line"><span class="built_in">where</span> (emp_no%2)=1 and last_name != <span class="string">'Mary'</span> </span><br><span class="line">order by hire_date desc</span><br></pre></td></tr></table></figure><ul><li>员工号为奇数，则emp_no取余应为1</li><li>last_name不为Mary，用‘！=’ 或 ‘&lt;&gt;’表示</li><li>根据hire_date逆序排列，用desc</li></ul><hr><ol start="6"><li>统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `salary` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`from_date`));</span><br><span class="line">CREATE TABLE IF NOT EXISTS &quot;titles&quot; (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `title` varchar(50) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date DEFAULT NULL);</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select title,avg(salary) as avg from salaries,titles </span><br><span class="line"><span class="built_in">where</span> salaries.emp_no = titles.emp_no and salaries.to_date=<span class="string">'9999-01-01'</span> and titles.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line">group by title</span><br></pre></td></tr></table></figure><ul><li>多表查询，连接查询是一种特殊的多表查询</li></ul><hr><ol start="7"><li>获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `salary` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select emp_no, salary from salaries </span><br><span class="line"><span class="built_in">where</span> to_date=<span class="string">'9999-01-01'</span> </span><br><span class="line">and salary = (select distinct salary from salaries order by salary desc <span class="built_in">limit</span> 1,1)</span><br><span class="line">或</span><br><span class="line">select emp_no,salary from salaries</span><br><span class="line"><span class="built_in">where</span> to_date = <span class="string">'9999-01-01'</span></span><br><span class="line">order by salary desc <span class="built_in">limit</span> 1,1</span><br></pre></td></tr></table></figure><ul><li>注意多个人工资相同的情况</li></ul><hr><ol start="8"><li>查找当前薪水(to_date=’9999-01-01’)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, max(s.salary), e.last_name, e.first_name from employees e inner join salaries s </span><br><span class="line">on e.emp_no=s.emp_no </span><br><span class="line"><span class="built_in">where</span> s.to_date=<span class="string">'9999-01-01'</span> and s.salary != (select max(salary) from salaries <span class="built_in">where</span> to_date=<span class="string">'9999-01-01'</span>)</span><br></pre></td></tr></table></figure></li></ol><p>本题做法很多，主要思想为多层SELECT嵌套与MAX()函数结合</p><ul><li>先利用MAX()函数找出salaries中当前薪水最高者，即SELECT MAX(salary) FROM salaries WHERE to_date = ‘9999-01-01’</li><li>再利用INNER JOIN连接employees与salaries表，限定条件为【同一员工】e.emp_no = s.emp_no、【当前】s.to_date = ‘9999-01-01’与【非薪水最高】s.salary NOT IN (SELECT MAX(salary) FROM salaries WHERE to_date = ‘9999-01-01’)</li><li>在以上限制条件下找薪水最高者，即为所有员工薪水的次高者</li></ul><hr><ol start="9"><li>查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `departments` (</span><br><span class="line">    `dept_no` char(4) NOT NULL,</span><br><span class="line">    `dept_name` varchar(40) NOT NULL,</span><br><span class="line">    PRIMARY KEY (`dept_no`));</span><br><span class="line">CREATE TABLE `dept_emp` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `dept_no` char(4) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `birth_date` date NOT NULL,</span><br><span class="line">    `first_name` varchar(14) NOT NULL,</span><br><span class="line">    `last_name` varchar(16) NOT NULL,</span><br><span class="line">    `gender` char(1) NOT NULL,</span><br><span class="line">    `hire_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select e.last_name, e.first_name, dp.dept_name from employees e </span><br><span class="line">left outer join dept_emp de on e.emp_no = de.emp_no </span><br><span class="line">left outer join departments dp on de.dept_no=dp.dept_no</span><br></pre></td></tr></table></figure><p>本题思路为运用两次LEFT JOIN连接嵌套</p><ul><li>第一次LEFT JOIN连接employees表与dept_emp表，得到所有员工的last_name和first_name以及对应的dept_no，也包括暂时没有分配部门的员工</li><li>第二次LEFT JOIN连接上表与departments表，即连接dept_no与dept_name，得到所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工</li><li><strong>注意：</strong> 第一次 left join 是把未分配部门的员工算进去了，但是只得到了部门号，没有部门名，所以第二次也要 left join 把含有部门名 departments 连接起来，否则在第二次连接时就选不上未分配部门的员工了。</li></ul><hr><ol start="10"><li>查找员工编号emp_no为10001其自入职以来的薪水salary涨幅值growth<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `salary` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT ( </span><br><span class="line">(SELECT salary FROM salaries WHERE emp_no = 10001 ORDER BY to_date DESC LIMIT 1) -</span><br><span class="line">(SELECT salary FROM salaries WHERE emp_no = 10001 ORDER BY to_date ASC LIMIT 1)</span><br><span class="line">) AS growth</span><br></pre></td></tr></table></figure><ul><li>先分别找到emp_no=10001的员工的第一次工资记录与最后一次工资记录</li><li>再将最后一次工资记录减去第一次工资记录得到入职以来salary的涨幅，最后用别名growth代替</li></ul>]]></content>
    
    <summary type="html">
    
      sql数据库中常用的查询语句
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL查询语句" scheme="http://yoursite.com/tags/MySQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>数据库sql实战(1)</title>
    <link href="http://yoursite.com/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93sql%E5%AE%9E%E6%88%98-1/"/>
    <id>http://yoursite.com/2019/05/06/数据库sql实战-1/</id>
    <published>2019-05-06T12:35:26.000Z</published>
    <updated>2019-05-06T12:43:03.254Z</updated>
    
    <content type="html"><![CDATA[<ol><li>查找最晚入职的员工的所有信息<br>数据表定义如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `employees` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `birth_date` date NOT NULL,</span><br><span class="line">    `first_name` varchar(14) NOT NULL,</span><br><span class="line">    `last_name` varchar(16) NOT NULL,</span><br><span class="line">    `gender` char(1) NOT NULL,</span><br><span class="line">    `hire_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employees <span class="built_in">where</span> hire_date = (select max(hire_date) from employees)</span><br></pre></td></tr></table></figure><p>最晚入职的当天未必就一个人，也许有多人，使用排序并限制得只能取得指定数量的结果。因此不使用limit和top，而是使用聚合查询的max函数求出最晚的入职时间，按最晚入职时间进行查询。</p><hr><ol start="2"><li>查找入职员工时间排名倒数第三的员工所有信息 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employees <span class="built_in">where</span> hire_date = (select distinct hire_date from employees order by hire_date desc <span class="built_in">limit</span> 2,1)</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>distinct：</strong> 在使用MySQL时，有时需要查询出某个字段不重复的记录，这时可以使用mysql提供的distinct这个关键字来过滤重复的记录。</li><li><strong>limit字句：</strong> Limit子句可以被用于强制 SELECT 语句返回指定的记录数。Limit接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//初始记录行的偏移量是 0(而不是 1)：</span><br><span class="line">mysql&gt; SELECT * FROM table LIMIT 5,10; //检索记录行6-15</span><br><span class="line"></span><br><span class="line">//为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1：</span><br><span class="line">mysql&gt; SELECT * FROM table LIMIT 95,-1; // 检索记录行 96-last</span><br><span class="line"></span><br><span class="line">//如果只给定一个参数，它表示返回最大的记录行数目。换句话说，LIMIT n 等价于 LIMIT 0,n：</span><br><span class="line">mysql&gt; SELECT * FROM table LIMIT 5;     //检索前 5 个记录行</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="3"><li>查找各个部门当前(to_date=’9999-01-01’)领导当前薪水详情以及其对应部门编号dept_no<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dept_manager` (</span><br><span class="line">    `dept_no` char(4) NOT NULL,</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">    CREATE TABLE `salaries` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `salary` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select salaries.*, dept_manager.dept_no from salaries inner join dept_manager </span><br><span class="line">on salaries.emp_no=dept_manager.emp_no </span><br><span class="line">and salaries.to_date=<span class="string">'9999-01-01'</span> and dept_manager.to_date=<span class="string">'9999-01-01'</span>;</span><br></pre></td></tr></table></figure><p>使用多表查询或连接查询，根据要求，确定salaries表为主表，使用inner join进行连接，连接条件为emp_no字段相同，在加入where字句筛选to_date=’9999-01-01’。</p><hr><ol start="4"><li>查找所有已经分配部门的员工的last_name和first_name<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dept_emp` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `dept_no` char(4) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `birth_date` date NOT NULL,</span><br><span class="line">    `first_name` varchar(14) NOT NULL,</span><br><span class="line">    `last_name` varchar(16) NOT NULL,</span><br><span class="line">    `gender` char(1) NOT NULL,</span><br><span class="line">    `hire_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.last_name, e.first_name, d.dept_no from employees e inner join dept_emp d on e.emp_no = d.emp_no</span><br></pre></td></tr></table></figure><p>因为要查找所有已分配部门的员工信息，所以两表中都存在的emp_no才是所要查询的目标，因此使用inner join。</p><hr><ol start="5"><li>查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括展示没有分配具体部门的员工<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.last_name, e.first_name, d.dept_no from employees e left outer join dept_emp d on e.emp_no = d.emp_no</span><br></pre></td></tr></table></figure></li></ol><p>因为要查找所有员工信息，所以左表中所有的emp_no都要包含，因此使用left outer join。</p><hr><ol start="6"><li><p>查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `employees` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `birth_date` date NOT NULL,</span><br><span class="line">    `first_name` varchar(14) NOT NULL,</span><br><span class="line">    `last_name` varchar(16) NOT NULL,</span><br><span class="line">    `gender` char(1) NOT NULL,</span><br><span class="line">    `hire_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`));</span><br><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `salary` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, s.salary from employees e inner join salaries s</span><br><span class="line">on s.emp_no = e.emp_no and s.from_date = e.hire_date</span><br><span class="line">order by e.emp_no desc</span><br></pre></td></tr></table></figure></li></ol><ul><li>由于测试数据中，salaries.emp_no 不唯一（因为号码为 emp_no 的员工会有多次涨薪的可能，所以在 salaries 中对应的记录不止一条），而employees.emp_no 唯一，即 salaries 的数据会多于 employees，因此需先找到 employees.emp_no 在 salaries 表中对应的记录salaries.emp_no，则有限制条件 e.emp_no = s.emp_no</li><li>根据题意注意到 salaries.from_date 和 employees.hire_date 的值应该要相等，因此有限制条件 e.hire_date = s.from_date</li><li>根据题意要按照 emp_no 值逆序排列，因此最后要加上 ORDER BY e.emp_no DESC</li></ul><hr><ol start="7"><li><p>查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `salary` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select emp_no, count(emp_no) t from salaries group by emp_no having t&gt;15</span><br></pre></td></tr></table></figure></li></ol><ul><li>用COUNT()函数和GROUP BY语句可以统计同一emp_no值的记录条数</li><li>根据题意，输出的涨幅次数为t，故用AS语句将COUNT(emp_no)的值转换为t (AS可省略)</li><li>由于COUNT()函数不可用于WHERE语句中，故使用HAVING语句来限定t&gt;15的条件</li><li><strong>having子句：</strong> having字句可以让我们筛选<strong>成组后</strong>的各种数据，<strong>where字句在聚合前</strong>先筛选记录，也就是说作用在group by和having字句前。而 having子句在聚合后对组记录进行筛选。我的理解就是真实表中没有此数据，这些数据是通过一些函数生存。</li></ul><hr><ol start="8"><li>找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select distinct salary from salaries <span class="built_in">where</span> to_date=<span class="string">'9999-01-01'</span> order by salary desc</span><br><span class="line">或</span><br><span class="line">select salary from salaries <span class="built_in">where</span> to_date=<span class="string">'9999-01-01'</span> group by salary order by salary desc</span><br></pre></td></tr></table></figure></li></ol><p>相同薪水显示一次，使用SELECT DISTINCT可去除重复值，但是大表一般用distinct效率不高，大数据量的时候都禁止用distinct，可以用group by解决重复问题。</p><hr><ol start="9"><li><p>获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dept_manager` (</span><br><span class="line">    `dept_no` char(4) NOT NULL,</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `salaries` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `salary` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`from_date`));</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.dept_no, d.emp_no, s.salary </span><br><span class="line">FROM salaries AS s INNER JOIN dept_manager AS d </span><br><span class="line">ON d.emp_no = s.emp_no</span><br><span class="line">AND d.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line">AND s.to_date = <span class="string">'9999-01-01'</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>先用INNER JOIN连接两张表，限制条件是两张表的emp_no相同，即d.emp_no = s.emp_no，并且将salaries用别名s代替，dept_manager用别名d代替</li><li>根据题意，要获取当前manager的当前salary情况，再加上限制条件d.to_date = ‘9999-01-01’ AND s.to_date = ‘9999-01-01’即可（因为同一emp_no在salaries表中对应多条涨薪记录，而当s.to_date = ‘9999-01-01’时是该员工当前的薪水记录）</li></ul><ol start="10"><li>获取所有非manager的员工emp_no<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dept_manager` (</span><br><span class="line">    `dept_no` char(4) NOT NULL,</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `from_date` date NOT NULL,</span><br><span class="line">    `to_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">    `emp_no` int(11) NOT NULL,</span><br><span class="line">    `birth_date` date NOT NULL,</span><br><span class="line">    `first_name` varchar(14) NOT NULL,</span><br><span class="line">    `last_name` varchar(16) NOT NULL,</span><br><span class="line">    `gender` char(1) NOT NULL,</span><br><span class="line">    `hire_date` date NOT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>方法1：SQL支持集合运算</p><p>  – EXPECT  集合差运算</p><p>  – UNION  集合并运算</p><p>  – INTERSECT 集合交运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no from employees e </span><br><span class="line">EXCEPT</span><br><span class="line">select d.emp_no from dept_manager d</span><br></pre></td></tr></table></figure></li><li><p>方法2：使用NOT IN选出在employees但不在dept_manager中的emp_no记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT emp_no FROM employees</span><br><span class="line">WHERE emp_no NOT IN (SELECT emp_no FROM dept_manager)</span><br></pre></td></tr></table></figure></li><li><p>方法3：先使用LEFT JOIN连接两张表，再从此表中选出dept_no值为NULL对应的emp_no记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT employees.emp_no FROM employees LEFT JOIN dept_manager</span><br><span class="line">ON employees.emp_no = dept_manager.emp_no</span><br><span class="line">WHERE dept_no IS NULL</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      sql数据库中常用的查询语句
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL查询语句" scheme="http://yoursite.com/tags/MySQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Java8的集合4：LinkedHashMap的实现原理</title>
    <link href="http://yoursite.com/2019/05/06/Java8%E7%9A%84%E9%9B%86%E5%90%884%EF%BC%9ALinkedHashMap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/05/06/Java8的集合4：LinkedHashMap的实现原理/</id>
    <published>2019-05-06T12:35:01.000Z</published>
    <updated>2019-05-06T12:39:14.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>按照惯例，先看一下源码里的第一段注释：</p><p>Hash table and linked list implementation of the Map interface, with predictable iteration order. This implementation differs from HashMap in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (insertion-order). Note that insertion order is not affected if a key is re-inserted into the map. (A key k is reinserted into a map m if m.put(k, v) is invoked when m.containsKey(k) would return true immediately prior to the invocation.)</p><p>从注释中，我们可以先了解到LinkedHashMap是通过<strong>哈希表</strong>和<strong>链表</strong>实现的，它通过维护一个链表来保证对哈希表迭代时的<strong>有序性</strong>，而这个有序是指<strong>键值对插入的顺序</strong>。另外，当向哈希表中重复插入某个键的时候，不会影响到原来的有序性。也就是说，假设你插入的键的顺序为1、2、3、4，后来再次插入2，迭代时的顺序还是1、2、3、4，而不会因为后来插入的2变成1、3、4、2。（但其实我们可以改变它的规则，使它变成1、3、4、2）</p><p>LinkedHashMap的实现主要分两部分，一部分是哈希表，另外一部分是链表。哈希表部分继承了HashMap，拥有了HashMap那一套高效的操作，LinkedHashMap中链表的部分，通过一个双向链表，按序存储HashMap的每个键值对，借此来维护有序性。</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>LinkedHashMap 是继承自 HashMap 的，所以它已经从 HashMap 那里继承了与哈希表相关的操作了，那么在 LinkedHashMap 中，它可以专注于链表实现的那部分，所以与链表实现相关的属性如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//LinkedHashMap的链表节点继承了HashMap的节点，而且每个节点都包含了前指针和后指针，所以这里可以看出它是一个双向链表</span><br><span class="line">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        super(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//头指针</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">//尾指针</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">//默认为false。当为true时，表示链表中键值对的顺序与每个键的插入顺序一致，也就是说重复插入键，也会更新顺序</span><br><span class="line">//简单来说，为false时，就是上面所指的1、2、3、4的情况；为true时，就是1、3、4、2的情况</span><br><span class="line">final boolean accessOrder;</span><br></pre></td></tr></table></figure></p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>在HashMap的源码中，我们可以发现，HashMap中有如下三个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Callbacks to allow LinkedHashMap post-actions</span><br><span class="line"></span><br><span class="line">void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125;</span><br><span class="line"></span><br><span class="line">void afterNodeInsertion(boolean evict) &#123; &#125;</span><br><span class="line"></span><br><span class="line">void afterNodeRemoval(Node&lt;K,V&gt; p) &#123; &#125;</span><br></pre></td></tr></table></figure></p><p>这三个方法表示的是在访问、插入、删除某个节点之后，进行一些处理，它们在LinkedHashMap都有各自的实现。LinkedHashMap正是通过重写这三个方法来保证<strong>链表</strong>的插入、删除的有序性。</p><h2 id="afterNodeAccess方法"><a href="#afterNodeAccess方法" class="headerlink" title="afterNodeAccess方法"></a>afterNodeAccess方法</h2><p>改方法就是把当前节点e移至链表的尾部。因为使用的是双向链表，所以在尾部插入可以以O（1）的时间复杂度来完成。并且只有当accessOrder设置为true时，才会执行这个操作。在HashMap的putVal方法中，就调用了这个方法。</p><h2 id="afterNodeInsertion方法"><a href="#afterNodeInsertion方法" class="headerlink" title="afterNodeInsertion方法"></a>afterNodeInsertion方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeInsertion(boolean evict) &#123; // possibly remove eldest</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    if (evict &amp;&amp; (first = head) != null &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        K key = first.key;</span><br><span class="line">        removeNode(hash(key), key, null, false, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>afterNodeInsertion方法是在哈希表中插入了一个新节点时调用的，它会把链表的头节点删除掉，删除的方式是通过调用HashMap的removeNode方法。通过afterNodeInsertion方法和afterNodeAccess方法，就可以简单的实现一个基于最近最少使用（LRU）的淘汰策略。当然，我们还要重写removeEldestEntry方法，因为它默认返回的是false。</p><h2 id="afterNodeRemoval方法"><a href="#afterNodeRemoval方法" class="headerlink" title="afterNodeRemoval方法"></a>afterNodeRemoval方法</h2><p>这个方法是当HashMap删除一个键值对时调用的，它会把在HashMap中删除的那个键值对一并从链表中删除，保证了哈希表和链表的一致性。</p><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><p>LinkedHashMap的get方法调用的是HashMap的getNode方法来获取结果的。并且，如果你把accessOrder设置为true，那么在获取到值之后，还会调用afterNodeAccess方法。这样就能保证一个<strong>LRU</strong>的算法。</p><h2 id="put和remove方法"><a href="#put和remove方法" class="headerlink" title="put和remove方法"></a>put和remove方法</h2><p>LinkedHashMap的源码中没有找到put方法，这就说明了它并没有重写put方法，所以我们调用的put方法其实是HashMap的put方法。因为HashMap的put方法中调用了afterNodeAccess方法和afterNodeInsertion方法，已经足够保证链表的有序性了，所以它也就没有重写put方法了。remove方法也是如此。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>LinkedHashMap是继承于HashMap，是基于HashMap和双向链表来实现的。</li><li>HashMap无序；LinkedHashMap有序，可分为插入顺序和访问顺序两种。如果是访问顺序（accessOrder=true），那put和get操作已存在的Entry时，都会把Entry移动到双向链表的表尾(其实是先删除再插入)。</li><li>LinkedHashMap存取数据，还是跟HashMap一样使用的Entry[]的方式，双向链表只是为了保证顺序。</li><li>LinkedHashMap是线程不安全的。</li></ol>]]></content>
    
    <summary type="html">
    
      LinkedHashMap是继承于HashMap，是基于HashMap和双向链表来实现的。HashMap无序；LinkedHashMap有序，可分为插入顺序和访问顺序两种。如果是访问顺序（accessOrder=true），那put和get操作已存在的Entry时，都会把Entry移动到双向链表的表尾(其实是先删除再插入)。LinkedHashMap是线程不安全的。
    
    </summary>
    
      <category term="JAVA集合" scheme="http://yoursite.com/categories/JAVA%E9%9B%86%E5%90%88/"/>
    
    
      <category term="LinkedHashMap" scheme="http://yoursite.com/tags/LinkedHashMap/"/>
    
  </entry>
  
  <entry>
    <title>Java8的集合3：HashMap的实现原理</title>
    <link href="http://yoursite.com/2019/05/05/Java8%E7%9A%84%E9%9B%86%E5%90%883%EF%BC%9AHashMap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/05/05/Java8的集合3：HashMap的实现原理/</id>
    <published>2019-05-05T12:47:29.000Z</published>
    <updated>2019-05-05T12:54:13.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一上来，先来看看源码中的这一段注释，我们可以从中提取到一些关键信息：<br>Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time.<br>翻译一下大概就是在说，这个哈希表是基于Map接口的实现的，它允许null值和null键，它不是线程同步的，同时也不保证有序。<br>This implementation provides constant-time performance for the basic operations (get and put), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the “capacity” of the HashMap instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it’s very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. An instance of HashMap has two parameters that affect its performance: initial capacity and load factor. The capacity is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The load factor is a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.<br>再来看看这一段，讲的是Map的这种实现方式为get（取）和put（存）带来了比较好的性能。但是如果涉及到大量的<strong>遍历操作</strong>的话，就尽量不要把capacity设置得太高（或load factor设置得太低），否则会严重降低遍历的效率。<br>影响HashMap性能的两个重要参数：“<strong>initial capacity</strong>”（初始化容量）和”<strong>load factor</strong>“（负载因子）。简单来说，容量就是哈希表桶的个数，负载因子就是键值对个数与哈希表长度的一个比值，当比值超过负载因子之后，HashMap就会进行rehash操作来进行扩容。<br>HashMap 的大致结构如下，其中哈希表是一个<strong>数组</strong>，我们经常把数组中的每一个节点称为一个桶，哈希表中的每个节点都用来存储一个键值对。在插入元素时，如果发生冲突（即多个键值对映射到同一个桶上）的话，就会通过<strong>链表</strong>的形式来解决冲突。因为一个桶上可能存在多个键值对，所以在查找的时候，会先通过key的哈希值先定位到桶，再遍历桶上的所有键值对，找出key相等的键值对，从而来获取value。</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//默认的初始容量为16</span><br><span class="line">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</span><br><span class="line">//最大的容量上限为2^30</span><br><span class="line">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class="line">//默认的负载因子为0.75</span><br><span class="line">static final <span class="built_in">float</span> DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class="line">//变成树型结构的临界值为8</span><br><span class="line">static final int TREEIFY_THRESHOLD = 8;</span><br><span class="line">//恢复链式结构的临界值为6</span><br><span class="line">static final int UNTREEIFY_THRESHOLD = 6;</span><br><span class="line">//哈希表</span><br><span class="line">transient Node&lt;K,V&gt;[] table;</span><br><span class="line">//哈希表中键值对的个数</span><br><span class="line">transient int size;</span><br><span class="line">//哈希表被修改的次数</span><br><span class="line">transient int modCount;</span><br><span class="line">//它是通过capacity*load factor计算出来的，当size到达这个值时，就会进行扩容操作</span><br><span class="line">int threshold;</span><br><span class="line">//负载因子</span><br><span class="line">final <span class="built_in">float</span> loadFactor;</span><br><span class="line">//当哈希表的大小超过这个阈值，才会把链式结构转化成树型结构，否则仅采取扩容来尝试减少冲突</span><br><span class="line">static final int MIN_TREEIFY_CAPACITY = 64;</span><br></pre></td></tr></table></figure><p>下面是 Node 类的定义，它是 HashMap 中的一个静态内部类，哈希表中的每一个节点都是 Node 类型。我们可以看到，Node 类中有 4 个属性，其中除了 key 和 value 之外，还有 hash 和 next 两个属性。hash 是用来存储 key 的哈希值的，next 是在构建链表时用来指向后继节点的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    final int <span class="built_in">hash</span>;</span><br><span class="line">    final K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><p>实现步骤大致如下： </p><ol><li>通过hash值获取该key映射到的桶。</li><li>桶上的key就是要查找的key，则直接命中。 </li><li>桶上的key不是要查找的key，则查看后续节点：<br> （1）如果后续节点是树节点，通过调用树的方法查找该key。<br> （2）如果后续节点是链式节点，则通过循环遍历链查找该key。<h2 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h2>put方法比较复杂，实现步骤大致如下： </li><li>先通过hash值计算出key映射到哪个桶。</li><li>如果桶上没有碰撞冲突，则直接插入。 </li><li>如果出现碰撞冲突了，则需要处理冲突：<br> （1）如果该桶使用红黑树处理冲突，则调用红黑树的方法插入。<br> （2）否则采用传统的链式方法插入。如果链的长度到达临界值，则把链转变为红黑树。. .</li><li>如果桶中存在重复的键，则为该键替换新值。 </li><li>如果size大于阈值，则进行扩容。<h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h2>理解了put方法之后，remove已经没什么难度了，所以重复的内容就不再做详细介绍了。<h2 id="hash方法"><a href="#hash方法" class="headerlink" title="hash方法"></a>hash方法</h2>在get方法和put方法中都需要先计算key映射到哪个桶上，然后才进行之后的操作，计算的主要代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n - 1) &amp; hash</span><br></pre></td></tr></table></figure></li></ol><p>上面代码中的n指的是哈希表的大小，hash指的是key的哈希值，hash是通过下面这个方法计算出来的，采用了二次哈希的方式，其中key的hashCode方法是一个native方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static final int <span class="built_in">hash</span>(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    <span class="built_in">return</span> (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个hash方法先通过key的hashCode方法获取一个哈希值，再拿这个哈希值与它的<strong>高16位</strong>的哈希值做一个异或操作来得到最后的哈希值。</p><p>为啥要这样做呢？注释中是这样解释的：如果当n很小，假设为64的话，那么n-1即为63（0x111111），这样的值跟hashCode()直接做与操作，实际上只使用了哈希值的后6位。如果当哈希值的高位变化很大，低位变化很小，这样就很容易造成冲突了，所以这里把高低位都利用起来，从而解决了这个问题。</p><p>正是因为与的这个操作，决定了HashMap的大小只能是2的幂次方，想一想，如果不是2的幂次方，会发生什么事情？即使你在创建HashMap的时候指定了初始大小，HashMap在构建的时候也会调用下面这个方法来调整大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static final int tableSizeFor(int cap) &#123;</span><br><span class="line">    int n = cap - 1;</span><br><span class="line">    n |= n &gt;&gt;&gt; 1;</span><br><span class="line">    n |= n &gt;&gt;&gt; 2;</span><br><span class="line">    n |= n &gt;&gt;&gt; 4;</span><br><span class="line">    n |= n &gt;&gt;&gt; 8;</span><br><span class="line">    n |= n &gt;&gt;&gt; 16;</span><br><span class="line">    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法的作用看起来可能不是很直观，它的实际作用就是把cap变成第一个大于等于2的幂次方的数。例如，16还是16，13就会调整为16，17就会调整为32。</p><h2 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h2><p>HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍，与原来计算（n-1）&amp;hash的结果相比，只是多了一个bit位，所以节点要么就在原来的位置，要么就被分配到“原位置+旧容量”这个位置。</p><p>例如，原来的容量为32，那么应该拿hash跟31（0x11111）做与操作；在扩容扩到了64的容量之后，应该拿hash跟63（0x111111）做与操作。新容量跟原来相比只是多了一个bit位，假设原来的位置在23，那么当新增的那个bit位的计算结果为0时，那么该节点还是在23；相反，计算结果为1时，则该节点会被分配到23+31的桶上。</p><p>正是因为这样巧妙的rehash方式，保证了rehash之后每个桶上的节点数必定小于等于原来桶上的节点数，即保证了rehash之后不会出现更严重的冲突。</p><p>在这里有一个需要注意的地方，有些文章指出当哈希表的<strong>桶占用</strong>超过阈值时就进行扩容，这是不对的；实际上是当哈希表中的<strong>键值对个数</strong>超过阈值时，才进行扩容的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>通过红黑树的方式来处理哈希冲突是我第一次看见！学过哈希，学过红黑树，就是从来没想到两个可以结合到一起这么用！</p></li><li><p>按照原来的拉链法来解决冲突，如果一个桶上的冲突很严重的话，是会导致哈希表的效率降低至O（n），而通过红黑树的方式，可以把效率改进至O（logn）。相比链式结构的节点，树型结构的节点会占用比较多的空间，所以这是一种以空间换时间的改进方式。</p></li></ul>]]></content>
    
    <summary type="html">
    
      HashMap是基于Map接口的实现的，它允许null值和null键，它不是线程同步的，同时也不保证有序。HashMap在进行扩容时，每次扩容都是翻倍。HashMap通过红黑树的方式来处理哈希冲突，可以把效率改进至O（logn）。相比链式结构的节点，树型结构的节点会占用比较多的空间，所以这是一种以空间换时间的改进方式。
    
    </summary>
    
      <category term="JAVA集合" scheme="http://yoursite.com/categories/JAVA%E9%9B%86%E5%90%88/"/>
    
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
      <category term="红黑树" scheme="http://yoursite.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
</feed>
