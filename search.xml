<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java：CAS</title>
      <link href="/2019/04/26/Java%EF%BC%9ACAS/"/>
      <url>/2019/04/26/Java%EF%BC%9ACAS/</url>
      
        <content type="html"><![CDATA[<h1 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h1><hr><p>什么是悲观锁、乐观锁？在java语言里，总有一些名词看语义跟本不明白是啥玩意儿，也就总有部分面试官拿着这样的词来忽悠面试者，以此来找优越感，其实理解清楚了，这些词也就唬不住人了。</p><ul><li>synchronized 是悲观锁，这种线程一旦得到锁，其他需要锁的线程就挂起的情况就是悲观锁。</li><li>CAS 操作的就是乐观锁，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。</li><li>从思想上来说，Synchronized属于悲观锁，悲观地认为程序中的并发情况严重，所以严防死守。CAS属于乐观锁，乐观地认为程序中的并发情况不那么严重，所以让线程不断去尝试更新。<h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1></li></ul><hr><ul><li>在进入正题之前，我们先理解下下面的代码:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private static int count = 0;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       <span class="keyword">for</span> (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">           new Thread(new <span class="function"><span class="title">Runnable</span></span>() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">                   try &#123;</span><br><span class="line">                       Thread.sleep(10);</span><br><span class="line">                   &#125; catch (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line">                   //每个线程让count自增100次</span><br><span class="line">                   <span class="keyword">for</span> (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">                       count++;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line">       &#125;</span><br><span class="line">       try&#123;</span><br><span class="line">           Thread.sleep(2000);</span><br><span class="line">       &#125;catch (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(count);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><p>请问cout的输出值是否为200？答案是否定的，因为这个程序是线程不安全的，所以造成的结果count值可能小于200。</p><p>那么如何改造成线程安全的呢，其实我们可以使用上Synchronized同步锁,我们只需要在count++的位置添加同步锁，代码如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">private static int count = 0;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">            new Thread(new <span class="function"><span class="title">Runnable</span></span>() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(10);</span><br><span class="line">                    &#125; catch (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    //每个线程让count自增100次</span><br><span class="line">                    <span class="keyword">for</span> (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">                        synchronized (ThreadCas.class)&#123;</span><br><span class="line">                            count++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        try&#123;</span><br><span class="line">            Thread.sleep(2000);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>加了同步锁之后，count自增的操作变成了原子性操作，所以最终的输出一定是count=200，代码实现了线程安全。</p><p>但是Synchronized虽然确保了线程的安全，但是在性能上却不是最优的，Synchronized关键字会让没有得到锁资源的线程进入<font color="#DC143C">BLOCKED</font>状态，而后在争夺到锁资源后恢复为<font color="#DC143C">RUNNABLE</font>状态，这个过程中涉及到操作系统用户模式和内核模式的转换，代价比较高。</p><p>因此，在JAVA中改用原子类操作加以改进。所谓原子操作类，指的是java.util.concurrent.atomic包下，一系列以Atomic开头的包装类。例如AtomicBoolean，AtomicInteger，AtomicLong。它们分别用于Boolean，Integer，Long类型的原子性操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">private static AtomicInteger count = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">        new Thread(new <span class="function"><span class="title">Runnable</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                //每个线程让count自增100次</span><br><span class="line">                <span class="keyword">for</span> (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">                    count.incrementAndGet();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try&#123;</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">    &#125;catch (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用AtomicInteger之后，最终的输出结果同样可以保证是200。并且在某些情况下，代码的性能会比Synchronized更好。而Atomic操作的底层实现正是利用的CAS机制。</p><h1 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h1><hr><ul><li>想要理解CAS，首先先要了解下JMM。</li><li>JMM：Java内存模型，是一种抽象的概念，可以理解为一组规范。</li><li>JMM的特性：可见性，原子性，有序性。</li><li>JMM关于同步的规定：</li></ul><ol><li>线程解锁前必须将共享变量的值刷新回主内存。</li><li>线程加锁前必须读主内存的最新值到自己的工作内存中。</li><li>加锁解锁是同一把锁。</li><li>线程间的通信（传值）必须通过主内存。</li></ol><h1 id="什么是CAS？"><a href="#什么是CAS？" class="headerlink" title="什么是CAS？"></a>什么是CAS？</h1><hr><ul><li>在计算机科学中，<strong>比较并交换</strong>（Conmpare And Swap）是用于实现多线程同步的<strong>原子指令</strong>。 它将内存位置的内容与给定值进行比较，只有在相同的情况下，将该内存位置的内容修改为新的给定值。 这是作为单个原子操作完成的。 原子性保证新值基于最新信息计算; 如果该值在同一时间被另一个线程更新，则写入将失败。 操作结果必须说明是否进行替换; 这可以通过一个简单的布尔响应（这个变体通常称为比较和设置），或通过返回从内存位置读取的值来完成（摘自维基本科）。</li><li>CAS的思想很简单：三个参数，一个当前内存值V、旧的预期值A、即将更新的值B，当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做，并返回false。</li></ul><p>使用 compareAndSet方法将内存中的值<strong>5</strong>进行修改，第一次修改成功，内存中的值被改为<strong>2019</strong>，第二次进行比较时，由于内存中的值已经被修改，所以操作失败。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        AtomicInteger atomicInteger = new AtomicInteger(5);</span><br><span class="line">        //main <span class="keyword">do</span> something</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(5,2019)+<span class="string">"\t current data: "</span>+atomicInteger.get());</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(5,1024)+<span class="string">"\t current data: "</span>+atomicInteger.get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="CAS的缺点"><a href="#CAS的缺点" class="headerlink" title="CAS的缺点"></a>CAS的缺点</h1><hr><ol><li>CPU开销较大：<br>在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很大的压力。</li><li>不能保证代码块的原子性<br>CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用Synchronized了。<ol start="3"><li>可能会出现ABA问题。</li></ol></li></ol><h1 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h1><hr><ul><li>什么是ABA问题？<br>简单来说一句话：狸猫换太子。<br>举个例子：如线程1从内存X中取出A，这时候另一个线程2也从内存X中取出A，并且线程2进行了一些操作将内存X中的值变成了B，然后线程2又将内存X中的数据变成A，这时候线程1进行CAS操作发现内存X中仍然是A，然后线程1操作成功。虽然线程1的CAS操作成功，但是整个过程就是有问题的。比如链表的头在变化了两次后恢复了原值，但是不代表链表就没有变化。</li><li>如何解决：<br>JAVA中提供了<strong>AtomicStampedReference</strong>来处理会发生ABA问题的场景，主要是在对象中额外再增加一个标记来标识对象是否有过变更（类似于GitHub的版本号）。</li></ul><p>测试代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">static AtomicReference&lt;Integer&gt; atomicReference = new AtomicReference&lt;&gt;(100);</span><br><span class="line">static AtomicStampedReference&lt;Integer&gt; atomicStampedReference = new AtomicStampedReference&lt;&gt;(100,1);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    System.out.println(<span class="string">"=============以下是ABA问题的产生============="</span>);</span><br><span class="line">    new Thread(()-&gt;&#123;</span><br><span class="line">        atomicReference.compareAndSet(100,101);</span><br><span class="line">        atomicReference.compareAndSet(101,100);</span><br><span class="line">    &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line">    new Thread(()-&gt;&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //暂停1S线程2，保证线程1完成ABA操作</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(atomicReference.compareAndSet(100,2019)+<span class="string">"\t"</span>+atomicReference.get());</span><br><span class="line">    &#125;,<span class="string">"t2"</span>).start();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(2);</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"=============以下是ABA问题的解决============="</span>);</span><br><span class="line"></span><br><span class="line">    new Thread(()-&gt;&#123;</span><br><span class="line">        int stamp = atomicStampedReference.getStamp();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t第一次版本号： "</span>+stamp);</span><br><span class="line">        try &#123;</span><br><span class="line">            //暂停1S线程3</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(atomicStampedReference.compareAndSet(100,101,</span><br><span class="line">                atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+1));</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t第二次版本号： "</span>+atomicStampedReference.getStamp());</span><br><span class="line">        System.out.println(atomicStampedReference.compareAndSet(101,100,</span><br><span class="line">                atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+1));</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t第三次版本号： "</span>+atomicStampedReference.getStamp());</span><br><span class="line">    &#125;,<span class="string">"t3"</span>).start();</span><br><span class="line"></span><br><span class="line">    new Thread(()-&gt;&#123;</span><br><span class="line">        int stamp = atomicStampedReference.getStamp();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t第一次版本号： "</span>+stamp);</span><br><span class="line">        try &#123;</span><br><span class="line">            //暂停3S线程4，保证线程3完成ABA操作</span><br><span class="line">            TimeUnit.SECONDS.sleep(3);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        boolean result =  atomicStampedReference.compareAndSet(100,2019,stamp,stamp+1);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t修改成功否： "</span>+result+<span class="string">"\t 当前最新实际版本号： "</span>+atomicStampedReference.getStamp());</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"\t当前实际最新值： "</span>+atomicStampedReference.getReference());</span><br><span class="line">    &#125;,<span class="string">"t4"</span>).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">=============以下是ABA问题的产生=============</span><br><span class="line">true    2019</span><br><span class="line">=============以下是ABA问题的解决=============</span><br><span class="line">t3  第一次版本号： 1</span><br><span class="line">t4  第一次版本号： 1</span><br><span class="line">true</span><br><span class="line">t3  第二次版本号： 2</span><br><span class="line">true</span><br><span class="line">t3  第三次版本号： 3</span><br><span class="line">t4  修改成功否： false     当前最新实际版本号： 3</span><br><span class="line">t4  当前实际最新值： 100</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JAVA_CAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA_CAS </tag>
            
            <tag> ABA问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo搭建个人博客</title>
      <link href="/2019/04/25/Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/04/25/Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ol><li>安装 Node</li><li>安装 Git</li><li>注册 GitHub</li><li>安装 Hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h1 id="搭建本地个人博客"><a href="#搭建本地个人博客" class="headerlink" title="搭建本地个人博客"></a>搭建本地个人博客</h1><hr><h2 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h2><ul><li><p>新建一个空白文件夹（下文提到的“项目根目录”是指你新建的文件夹的位置）用于存放 hexo 资源。在空白文件夹里面打开 Git Bash ，输入下列命令行进行初始化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 hexo init</span><br></pre></td></tr></table></figure><h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 hexo g</span><br></pre></td></tr></table></figure><h2 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 hexo s</span><br></pre></td></tr></table></figure></li><li><p>关闭本地服务器在 Git Bash 界面按 Ctrl+C， 在浏览器输入：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 查看<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2f6zotc21j30m80fhqa3.jpg"></p><h1 id="美化个人博客"><a href="#美化个人博客" class="headerlink" title="美化个人博客"></a>美化个人博客</h1></li></ul><hr><h2 id="博客主题设置"><a href="#博客主题设置" class="headerlink" title="博客主题设置"></a>博客主题设置</h2><h3 id="克隆主题"><a href="#克隆主题" class="headerlink" title="克隆主题"></a>克隆主题</h3><ul><li>在项目根目录下的 <strong>themes</strong> 文件中，打开 <strong>Git Bash</strong> ，用命令行克隆下新的主题。我这里用的 <strong>Next</strong> 主题，需要其他主题的自己百度找。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git</span><br></pre></td></tr></table></figure><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><ul><li>用文本的方式打开项目根目录下的 <font color="#DC143C">_config.yml</font> 配置文件，找到 <strong>theme</strong> 把原来默认的 <strong><del>landscape</del> </strong> 主题名字，改成刚刚克隆的主题名字。</li></ul><h3 id="测试主题"><a href="#测试主题" class="headerlink" title="测试主题"></a>测试主题</h3><ul><li><p>重新回到项目根目录下，打开 Git Bath ，用命令行启动服务器。在浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2f72ii44vj30m80cg41j.jpg" alt=""></p><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3></li><li><p><strong>方法一：</strong>在项目根目录下，打开 <strong>Git Bash</strong> ，执行新建命令，然后 hexo 会自动在指定目录下生成对应文件，如下图所示。然后找到新建好的文件，打开即可进行编辑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 hexo new <span class="string">"此处输入文章名字"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>方法二：</strong>可以直接把已经准备的 md 格式的文章复制到 项目名称  <font color="#DC143C">/source/_posts</font> 目录下，然后打开文件，在文件头加入 front-matter 部分，title 表示文章标题，date 表示发布时间。如图所示，图片上用到的其他参数，后面会介绍到。</p></li><li><font color="#DC143C"><strong>重要的事情说三遍！！！</strong></font></li><li>front-matte 书写的时候要注意，冒号后面要跟一个空格号</li><li>front-matte 书写的时候要注意，冒号后面要跟一个空格号</li><li><p>front-matte 书写的时候要注意，冒号后面要跟一个空格号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 ---</span><br><span class="line">2 title: a</span><br><span class="line">3 date: 2019-04-25 21:27:13</span><br><span class="line">4 ---</span><br></pre></td></tr></table></figure></li><li><p>准备好 md 格式文件后，使用下面命令生成网站静态文件到默认设置的 public 文件夹，然后再启动本地服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 hexo g</span><br></pre></td></tr></table></figure></li></ul><h2 id="主题风格设置"><a href="#主题风格设置" class="headerlink" title="主题风格设置"></a>主题风格设置</h2><ul><li>打开主题文件夹下的  <font color="#DC143C">_config.yml</font> 配置文件（注意：这里要区别，不是項目根目录，主题文件夹的路径为：<font color="#DC143C">新建空白文件夹名称/themes/主题文件夹名称</font>）。通过查找功能找到 Schemes 模块，修改为 Gemini 风格。如果喜欢其他风格可以自己修改。</li><li>刷新页面可以看到新风格的界面如下图所示:<br><img src="http://ww1.sinaimg.cn/large/006pqaYvgy1g2f7f8og8pj30m80avtc0.jpg" alt=""><h2 id="博客左侧栏设置"><a href="#博客左侧栏设置" class="headerlink" title="博客左侧栏设置"></a>博客左侧栏设置</h2></li><li>在上面的网站界面，可以发现网站的文字是英文，只要修改一下语言模式即可。打开根目录文件夹下的  <font color="#DC143C">_config.yml</font>配置文件。找到 language，设置为 <strong>zh-CN</strong>。标题等其他参数的设置如下。可以对照效果图的具体位置，根据自己的实际需求进行修改。（注意：修改了项目根目录下的  <font color="#DC143C">_config.yml</font>配置文件，需要重启部署项目后才能生效）<h2 id="分类设置"><a href="#分类设置" class="headerlink" title="分类设置"></a>分类设置</h2><h3 id="添加分类列表"><a href="#添加分类列表" class="headerlink" title="添加分类列表"></a>添加分类列表</h3></li><li><p>在项目根目录下，执行下面的命令行，新建分类页面，然后会在项目根目录下的 <strong>source</strong> 文件夹中新建一个 <strong>categories</strong> 文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 hexo new page categories</span><br></pre></td></tr></table></figure></li><li><p>打开 <strong>categories</strong> 文件夹中的 <strong>index.md</strong> 文件，添加 type 字段，设置为 “<strong>categories</strong>”。如下图所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 ---</span><br><span class="line">2 title: categories</span><br><span class="line">3 date: 2019-04-25 22:17:14</span><br><span class="line">4 <span class="built_in">type</span>: <span class="string">"categories"</span></span><br><span class="line">5 ---</span><br></pre></td></tr></table></figure></li><li><p>接着到主题文件夹下的<font color="#DC143C">_config.yml</font> 配置文件下，找到 <strong>menu</strong> 模块，把 <strong>categories</strong> 的注释给去掉。</p></li><li>刷新页面（如果刷新没效果，可以重启服务），可以在页面左侧栏上看到多了一个“分类”列表。<h3 id="如何将文章添加到对应分类？"><a href="#如何将文章添加到对应分类？" class="headerlink" title="如何将文章添加到对应分类？"></a>如何将文章添加到对应分类？</h3></li><li>文章发布前，在<font color="#DC143C"> front-matter</font> 部分，多写一个 <strong>categories</strong> 字段，然后参数写上类别的名称，保存后重启服务，在网页上点击“分类”，可以看到分类下已经生成了刚刚设置的类别，并把刚刚发布的文章归类在此类别下。如下图所示<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 ---</span><br><span class="line">2 title: <span class="string">"文章的标题"</span></span><br><span class="line">3 date: 2019-04-25 22:17:14</span><br><span class="line">4 categories: <span class="string">"文章的分类"</span></span><br><span class="line">5 ---</span><br></pre></td></tr></table></figure></li></ul><h2 id="标签设置"><a href="#标签设置" class="headerlink" title="标签设置"></a>标签设置</h2><ul><li>方法跟分类设置一样，所以不再赘述介绍</li><li>但是需要补充一点， <font color="#DC143C"> front-matter</font> 中字段有多个参数的时候，可以使用如下图的写法。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1 ---</span><br><span class="line">2 title: <span class="string">"文章的标题"</span></span><br><span class="line">3 date: 2019-04-25 22:17:14</span><br><span class="line">4 categories: <span class="string">"文章的分类"</span></span><br><span class="line">5 tags: </span><br><span class="line">6   -<span class="string">"标签1"</span></span><br><span class="line">7   -<span class="string">"标签2"</span></span><br><span class="line">8   -<span class="string">"标签3"</span></span><br><span class="line">9 description: <span class="string">"描述"</span></span><br><span class="line">10 photos: </span><br><span class="line">11   -<span class="string">"链接"</span></span><br><span class="line">12 ---</span><br></pre></td></tr></table></figure></li></ul><h2 id="博客添加站内搜索"><a href="#博客添加站内搜索" class="headerlink" title="博客添加站内搜索"></a>博客添加站内搜索</h2><ul><li>NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia。下面介绍 <strong>Local Search</strong> 的安装吧。注意：安装的时候要是项目根目录下安装。</li><li><p>安装 hexo-generator-search</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p>安装 hexo-generator-searchdb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录下的 <font color="#DC143C">_config.yml </font>配置文件的文末添加下面这段代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 search:</span><br><span class="line">2   path: search.xml</span><br><span class="line">3   field: post</span><br><span class="line">4   format: html</span><br><span class="line">5   <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure></li><li><p>编辑主题文件夹的 <font color="#DC143C">_config.yml </font> 配置文件，设置<font color="#DC143C"> Local searchenable </font>为 <strong>ture</strong>。</p></li><li>重启服务<h2 id="博客头像设置"><a href="#博客头像设置" class="headerlink" title="博客头像设置"></a>博客头像设置</h2><h3 id="添加博客头像"><a href="#添加博客头像" class="headerlink" title="添加博客头像"></a>添加博客头像</h3></li><li>打开主题文件夹下的 <font color="#DC143C">_config.yml </font> 配置文件，通过查找功能找到 <strong>avatar</strong>，然后把一个在线的头像图片地址（百度图片中直接复制链接即可），作为 <strong>url</strong> 的参数。</li><li>然后刷新页面，可以看到网站上已经显示了相应的头像了。<h2 id="右上角-fork-me-设置"><a href="#右上角-fork-me-设置" class="headerlink" title="右上角 fork me 设置"></a>右上角 fork me 设置</h2></li><li>在 <a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub Corners</a> 上选择你喜欢的挂饰，复制方框内的代码。</li><li>打开主题文件夹下的 <strong>layout</strong> 文件夹，用记事本的方式打开 <strong>_layout.swig</strong>，把刚刚复制的代码放到下面，并把 href 的参数，修改为自己的 github 链接（放自己要跳转的网址即可）。</li><li>重启服务器，查看效果<h2 id="网页背景设置"><a href="#网页背景设置" class="headerlink" title="网页背景设置"></a>网页背景设置</h2><h3 id="动态背景设置"><a href="#动态背景设置" class="headerlink" title="动态背景设置"></a>动态背景设置</h3></li><li>打开主题文件夹下的 <strong>layout</strong> 文件夹，用文本的方式打开 <strong>_layout.swig</strong> 文件，在文末加上如下的代码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;!-- 动态背景 --&gt;</span><br><span class="line">2 &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="背景图片设置"><a href="#背景图片设置" class="headerlink" title="背景图片设置"></a>背景图片设置</h3><ul><li>打开主题文件夹下的 <strong>source</strong> 文件夹，进入 <strong>css/_custom</strong> 文件下，用文本形式打开 <strong>custom.styl</strong> 文件，然后添加下面这段代码。代码中 <strong>url</strong> 的地址是指到： <font color="#DC143C">主题文件夹/source/images/</font> 。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 body&#123;</span><br><span class="line">2    background:url(/images/bg.jpg);</span><br><span class="line">3    background-size:cover;</span><br><span class="line">4    background-repeat:no-repeat;</span><br><span class="line">5    background-attachment:fixed;</span><br><span class="line">6    background-position:center;</span><br><span class="line">7    // 设置主题部分的透明度，具体看图</span><br><span class="line">8    opacity: 0.8;</span><br><span class="line">9 &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="首页文章预览设置"><a href="#首页文章预览设置" class="headerlink" title="首页文章预览设置"></a>首页文章预览设置</h2><ul><li>默认情况下，文章在首页是全文显示的，这样肯定是不方便读者浏览。所以需要实现预览模式。</li><li><strong>方法一：</strong>使用 <strong>&lt; !–more–&gt;</strong> 手动切断<br>这种方法可以根据文章的内容，自己在合适的位置添加 &lt; !–more–&gt; 标签，使用灵活，也是Hexo推荐的方法。</li><li><strong>方法二：</strong>添加 <strong>description</strong><br>在文章的<font color="#DC143C"> front-matter </font>中添加 <strong>description</strong> 和 <strong>photos</strong> 字段，如3.5图所示。如果不需要显示图片的话，可以把 photos 去掉。<br>ps：不知道 <font color="#DC143C"> front-matter </font> 是什么的话，跳转到第二章的第4点的发布文章看下。</li><li><strong>方法三</strong>：自动形成摘要<br>在主题文件下的<font color="#DC143C">_config.yml </font> 配置文件中添加默认截取的长度为 150 字符，可以根据需要自行设定。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 auto_excerpt:</span><br><span class="line">2   <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">3   length: 150</span><br></pre></td></tr></table></figure></li></ul><h2 id="RSS-设置"><a href="#RSS-设置" class="headerlink" title="RSS 设置"></a>RSS 设置</h2><ul><li><p>安装 hexo 插件，需要在 hexo 项目根目录下进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure></li><li><p>安装完成后在项目根目录下的 <font color="#DC143C">_config.yml </font> 配置文件的文末添加下面这段代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 <span class="comment"># Extentions</span></span><br><span class="line">2 <span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line">3 plugins: hexo-generator-feed</span><br></pre></td></tr></table></figure></li><li><p>在主题文件夹下的 <font color="#DC143C">_config.yml </font>  配置文件中，找到 <strong>rss</strong> ，在后面加上 <strong>/atom.xml</strong>。</p></li><li>重启服务，刷新页面<h2 id="社交小图标设置"><a href="#社交小图标设置" class="headerlink" title="社交小图标设置"></a>社交小图标设置</h2></li><li>在主题文件夹下的<font color="#DC143C">_config.yml </font>配置文件中，搜索 <strong>Social</strong>，然后提示自己增加自己需要的小图标并设置对应连接。</li><li>图标可以到 <a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">Font Awesome Icon</a> 网站查找。<h2 id="友情链接设置"><a href="#友情链接设置" class="headerlink" title="友情链接设置"></a>友情链接设置</h2></li><li>在主题文件夹下的 <font color="#DC143C">_config.yml </font>配置文件中，搜索 links_title，然后根据自己的需求自己吸修改。<h2 id="博客置顶设置"><a href="#博客置顶设置" class="headerlink" title="博客置顶设置"></a>博客置顶设置</h2></li><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 npm uninstall hexo-generator-index --save</span><br><span class="line">2 npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></li><li><p>然后在需要置顶的文章的 <strong>Front-matter</strong> 中加上 <strong>top</strong> 即可，数值越大表示等级越高，越靠前显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 ---</span><br><span class="line">2 title: <span class="string">"文章的标题"</span></span><br><span class="line">3 date: 2019-04-25 22:17:14</span><br><span class="line">4 top: 100</span><br><span class="line">5 ---</span><br></pre></td></tr></table></figure></li><li><p>在主题文件夹中打开<font color="#DC143C"> layout/_macro/post.swig</font> 文件，定位到 <strong>post-header</strong> ，把下面的代码添加进去即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 &#123;% <span class="keyword">if</span> post.top %&#125;</span><br><span class="line">2  &lt;i class=<span class="string">"fa fa-thumb-tack"</span>&gt;&lt;/i&gt;</span><br><span class="line">3   &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">4 &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="对接Github的远程仓库"><a href="#对接Github的远程仓库" class="headerlink" title="对接Github的远程仓库"></a>对接Github的远程仓库</h1><hr><ul><li>在Github创建一个公有仓库，并把公有仓库的链接保存下来。<br>注意：仓库名字必须是：username.github.io，其中username是你的用户名。</li><li>打开项目根目录下的 <font color="#DC143C">_config.yml </font> 配置文件，修改 <strong>deploy</strong> 的值。<strong>tpye</strong> 设置为 <strong>git</strong>，<strong>repo</strong> 则设置为刚刚新建的远程仓库链接。</li><li><font color="#DC143C">注意：冒号后面需要再加一个空格，不然会出现格式错误。</font> </li><li><p>安装hexo-deployer-gi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>一键部署到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 hexo g</span><br><span class="line">2 hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>回到刚刚新建的远程仓库，刷新页面，可以发现本地博客的相关文件已经全部部署到远程仓库上了。</p><h1 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h1></li></ul><hr><ul><li><p>常见命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure></li><li><p>缩写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>组合命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="本文参考链接"><a href="#本文参考链接" class="headerlink" title="本文参考链接"></a>本文参考链接</h1><hr><p><a href="https://www.jianshu.com/p/13f5e4d7099d" target="_blank" rel="noopener">https://www.jianshu.com/p/13f5e4d7099d</a></p><p><a href="http://theme-next.iissnan.com/theme-settings.html#rss" target="_blank" rel="noopener">http://theme-next.iissnan.com/theme-settings.html#rss</a></p><p><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a></p><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></p><p><a href="http://zwd596257180.gitee.io/blog/2019/04/15/hexo_manong_bog/" target="_blank" rel="noopener">http://zwd596257180.gitee.io/blog/2019/04/15/hexo_manong_bog/</a></p><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/10/hello-world/"/>
      <url>/2018/10/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
