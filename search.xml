<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java8的集合3：HashMap的实现原理]]></title>
    <url>%2F2019%2F05%2F05%2FJava8%E7%9A%84%E9%9B%86%E5%90%883%EF%BC%9AHashMap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[概述一上来，先来看看源码中的这一段注释，我们可以从中提取到一些关键信息：Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time.翻译一下大概就是在说，这个哈希表是基于Map接口的实现的，它允许null值和null键，它不是线程同步的，同时也不保证有序。This implementation provides constant-time performance for the basic operations (get and put), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the “capacity” of the HashMap instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it’s very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. An instance of HashMap has two parameters that affect its performance: initial capacity and load factor. The capacity is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The load factor is a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.再来看看这一段，讲的是Map的这种实现方式为get（取）和put（存）带来了比较好的性能。但是如果涉及到大量的遍历操作的话，就尽量不要把capacity设置得太高（或load factor设置得太低），否则会严重降低遍历的效率。影响HashMap性能的两个重要参数：“initial capacity”（初始化容量）和”load factor“（负载因子）。简单来说，容量就是哈希表桶的个数，负载因子就是键值对个数与哈希表长度的一个比值，当比值超过负载因子之后，HashMap就会进行rehash操作来进行扩容。HashMap 的大致结构如下，其中哈希表是一个数组，我们经常把数组中的每一个节点称为一个桶，哈希表中的每个节点都用来存储一个键值对。在插入元素时，如果发生冲突（即多个键值对映射到同一个桶上）的话，就会通过链表的形式来解决冲突。因为一个桶上可能存在多个键值对，所以在查找的时候，会先通过key的哈希值先定位到桶，再遍历桶上的所有键值对，找出key相等的键值对，从而来获取value。 属性12345678910111213141516171819202122//默认的初始容量为16static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;//最大的容量上限为2^30static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;//默认的负载因子为0.75static final float DEFAULT_LOAD_FACTOR = 0.75f;//变成树型结构的临界值为8static final int TREEIFY_THRESHOLD = 8;//恢复链式结构的临界值为6static final int UNTREEIFY_THRESHOLD = 6;//哈希表transient Node&lt;K,V&gt;[] table;//哈希表中键值对的个数transient int size;//哈希表被修改的次数transient int modCount;//它是通过capacity*load factor计算出来的，当size到达这个值时，就会进行扩容操作int threshold;//负载因子final float loadFactor;//当哈希表的大小超过这个阈值，才会把链式结构转化成树型结构，否则仅采取扩容来尝试减少冲突static final int MIN_TREEIFY_CAPACITY = 64; 下面是 Node 类的定义，它是 HashMap 中的一个静态内部类，哈希表中的每一个节点都是 Node 类型。我们可以看到，Node 类中有 4 个属性，其中除了 key 和 value 之外，还有 hash 和 next 两个属性。hash 是用来存储 key 的哈希值的，next 是在构建链表时用来指向后继节点的。123456static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final int hash; final K key; V value; Node&lt;K,V&gt; next;&#125; 方法get方法实现步骤大致如下： 通过hash值获取该key映射到的桶。 桶上的key就是要查找的key，则直接命中。 桶上的key不是要查找的key，则查看后续节点： （1）如果后续节点是树节点，通过调用树的方法查找该key。 （2）如果后续节点是链式节点，则通过循环遍历链查找该key。put方法put方法比较复杂，实现步骤大致如下： 先通过hash值计算出key映射到哪个桶。 如果桶上没有碰撞冲突，则直接插入。 如果出现碰撞冲突了，则需要处理冲突： （1）如果该桶使用红黑树处理冲突，则调用红黑树的方法插入。 （2）否则采用传统的链式方法插入。如果链的长度到达临界值，则把链转变为红黑树。. . 如果桶中存在重复的键，则为该键替换新值。 如果size大于阈值，则进行扩容。remove方法理解了put方法之后，remove已经没什么难度了，所以重复的内容就不再做详细介绍了。hash方法在get方法和put方法中都需要先计算key映射到哪个桶上，然后才进行之后的操作，计算的主要代码如下：1(n - 1) &amp; hash 上面代码中的n指的是哈希表的大小，hash指的是key的哈希值，hash是通过下面这个方法计算出来的，采用了二次哈希的方式，其中key的hashCode方法是一个native方法：1234static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125; 这个hash方法先通过key的hashCode方法获取一个哈希值，再拿这个哈希值与它的高16位的哈希值做一个异或操作来得到最后的哈希值。 为啥要这样做呢？注释中是这样解释的：如果当n很小，假设为64的话，那么n-1即为63（0x111111），这样的值跟hashCode()直接做与操作，实际上只使用了哈希值的后6位。如果当哈希值的高位变化很大，低位变化很小，这样就很容易造成冲突了，所以这里把高低位都利用起来，从而解决了这个问题。 正是因为与的这个操作，决定了HashMap的大小只能是2的幂次方，想一想，如果不是2的幂次方，会发生什么事情？即使你在创建HashMap的时候指定了初始大小，HashMap在构建的时候也会调用下面这个方法来调整大小：123456789static final int tableSizeFor(int cap) &#123; int n = cap - 1; n |= n &gt;&gt;&gt; 1; n |= n &gt;&gt;&gt; 2; n |= n &gt;&gt;&gt; 4; n |= n &gt;&gt;&gt; 8; n |= n &gt;&gt;&gt; 16; return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;&#125; 这个方法的作用看起来可能不是很直观，它的实际作用就是把cap变成第一个大于等于2的幂次方的数。例如，16还是16，13就会调整为16，17就会调整为32。 resize方法HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍，与原来计算（n-1）&amp;hash的结果相比，只是多了一个bit位，所以节点要么就在原来的位置，要么就被分配到“原位置+旧容量”这个位置。 例如，原来的容量为32，那么应该拿hash跟31（0x11111）做与操作；在扩容扩到了64的容量之后，应该拿hash跟63（0x111111）做与操作。新容量跟原来相比只是多了一个bit位，假设原来的位置在23，那么当新增的那个bit位的计算结果为0时，那么该节点还是在23；相反，计算结果为1时，则该节点会被分配到23+31的桶上。 正是因为这样巧妙的rehash方式，保证了rehash之后每个桶上的节点数必定小于等于原来桶上的节点数，即保证了rehash之后不会出现更严重的冲突。 在这里有一个需要注意的地方，有些文章指出当哈希表的桶占用超过阈值时就进行扩容，这是不对的；实际上是当哈希表中的键值对个数超过阈值时，才进行扩容的。 总结 通过红黑树的方式来处理哈希冲突是我第一次看见！学过哈希，学过红黑树，就是从来没想到两个可以结合到一起这么用！ 按照原来的拉链法来解决冲突，如果一个桶上的冲突很严重的话，是会导致哈希表的效率降低至O（n），而通过红黑树的方式，可以把效率改进至O（logn）。相比链式结构的节点，树型结构的节点会占用比较多的空间，所以这是一种以空间换时间的改进方式。]]></content>
      <categories>
        <category>JAVA集合</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java8的集合2：HashSet的实现原理]]></title>
    <url>%2F2019%2F05%2F05%2FJava8%E7%9A%84%E9%9B%86%E5%90%882%EF%BC%9AHashSet%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[概述HashSet是Set接口的典型实现，HashSet按照Hash算法来存储集合中的元素。存在以下特点： 不能保证元素的顺序，元素是无序的 HashSet不是同步的，需要外部保持线程之间的同步问题 集合元素值允许为null数据结构1234java.lang.Object java.util.AbstractCollection&lt;E&gt; java.util.AbstractSet&lt;E&gt; java.util.HashSet&lt;E&gt; 继承关系，实现接口1Serializable, Cloneable, Iterable&lt;E&gt;, Collection&lt;E&gt;, Set&lt;E&gt; 基本属性12private transient HashMap&lt;E,Object&gt; map; //map集合，HashSet存放元素的容器private static final Object PRESENT = new Object(); //map，中键对应的value值 方法构造方法123456789101112131415161718192021//无参构造方法，完成map的创建public HashSet() &#123; map = new HashMap&lt;&gt;();&#125;//指定集合转化为HashSet, 完成map的创建public HashSet(Collection&lt;? extends E&gt; c) &#123; map = new HashMap&lt;&gt;(Math.max((int) (c.size()/.75f) + 1, 16)); addAll(c);&#125;//指定初始化大小，和负载因子public HashSet(int initialCapacity, float loadFactor) &#123; map = new HashMap&lt;&gt;(initialCapacity, loadFactor);&#125;//指定初始化大小public HashSet(int initialCapacity) &#123; map = new HashMap&lt;&gt;(initialCapacity);&#125;//指定初始化大小和负载因子，dummy 无实际意义HashSet(int initialCapacity, float loadFactor, boolean dummy) &#123; map = new LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);&#125; 通过构造函数，不难发现，HashSet的底层是采用HashMap实现的。 add()方法123public boolean add(E e) &#123; return map.put(e, PRESENT)==null;&#125; PRESENT为HashSet类中定义的一个常量，并无实际的意义，HashSet的add()方法调用HashMap的put()方法实现，如果键已经存在，HashMap.put()放回的是旧值，添加失败；如果添加成功，map.put()方法返回的值为null ，HashSet.add()方法返回true。 要添加的元素为map中的key 。 remove()方法123public boolean remove(Object o) &#123; return map.remove(o)==PRESENT;&#125; 删除方法，调用map.remove()方法实现，若map.remove()能找到指定的key,则返回key对应的value。 对于Hashset而言，它所有的key对应的值都是PRESENT。完整源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123public class HashSet&lt;E&gt; extends AbstractSet&lt;E&gt; implements Set&lt;E&gt;, Cloneable, java.io.Serializable&#123; static final long serialVersionUID = -5024744406713321676L; //序列化版本号 private transient HashMap&lt;E,Object&gt; map; //HashMap变量，用于存放HashSet的值 private static final Object PRESENT = new Object(); //map中的值 //构造方法 public HashSet() &#123; map = new HashMap&lt;&gt;(); &#125; //构造方法，将指定的集合转化为HashSet public HashSet(Collection&lt;? extends E&gt; c) &#123; map = new HashMap&lt;&gt;(Math.max((int) (c.size()/.75f) + 1, 16)); addAll(c); &#125; //构造方法，指定初始化的大小和负载因子 public HashSet(int initialCapacity, float loadFactor) &#123; map = new HashMap&lt;&gt;(initialCapacity, loadFactor); &#125; //指定初始化大小 public HashSet(int initialCapacity) &#123; map = new HashMap&lt;&gt;(initialCapacity); &#125; //构造方法，采用default修饰，只能是同一个包下的成员访问。包不相同无法访问 HashSet(int initialCapacity, float loadFactor, boolean dummy) &#123; map = new LinkedHashMap&lt;&gt;(initialCapacity, loadFactor); &#125; //HashSet的遍历操作 //通过这个方法可以发现，HashSet调用了HashMap存放，因为HashSet并不是键值对存储，所以它只是把它的值做了Map中的键，在遍历HashSet的集合元素时，实际上是遍历的Map中Key的集合。 public Iterator&lt;E&gt; iterator() &#123; return map.keySet().iterator(); &#125; //返回集合中元素的容量 public int size() &#123; return map.size(); &#125; //判断是否为空 public boolean isEmpty() &#123; return map.isEmpty(); &#125; //是否包含指定的元素 public boolean contains(Object o) &#123; return map.containsKey(o); &#125; //添加元素，添加的元素作为了Map中的key,value使用了一个常量表示 public boolean add(E e) &#123; return map.put(e, PRESENT)==null; &#125; //删除元素 public boolean remove(Object o) &#123; return map.remove(o)==PRESENT; &#125; //清空集合 public void clear() &#123; map.clear(); &#125; //克隆方法 public Object clone() &#123; try &#123; HashSet&lt;E&gt; newSet = (HashSet&lt;E&gt;) super.clone(); newSet.map = (HashMap&lt;E, Object&gt;) map.clone(); return newSet; &#125; catch (CloneNotSupportedException e) &#123; throw new InternalError(); &#125; &#125; //写入输出流操作。 private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException &#123; // Write out any hidden serialization magic s.defaultWriteObject(); // Write out HashMap capacity and load factor s.writeInt(map.capacity()); s.writeFloat(map.loadFactor()); // Write out size s.writeInt(map.size()); // Write out all elements in the proper order. for (E e : map.keySet()) s.writeObject(e); &#125; //从输入流中读取对象 private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException &#123; // Read in any hidden serialization magic s.defaultReadObject(); // Read in HashMap capacity and load factor and create backing HashMap int capacity = s.readInt(); float loadFactor = s.readFloat(); map = (((HashSet)this) instanceof LinkedHashSet ? new LinkedHashMap&lt;E,Object&gt;(capacity, loadFactor) : new HashMap&lt;E,Object&gt;(capacity, loadFactor)); // Read in size int size = s.readInt(); // Read in all elements in the proper order. for (int i=0; i&lt;size; i++) &#123; E e = (E) s.readObject(); map.put(e, PRESENT); &#125; &#125;&#125; 总结 静下心来仔细研究了一下，发现hashset是通过将相应的内容存储在了一个hashmap里的key中，然后再去读取的。为了保证hashset里面的数据唯一性，这里将hashset存放的元素作为了hashmap里面唯一的key变量，value部分用一个PRESENT对象来存储，也就是源码里面的这一句内容： 1private static final Object PRESENT = new Object(); HashSet的底层通过HashMap实现的，而HashMap在1.7之前使用的是数组+链表实现，在1.8+使用的数组+链表+红黑树实现。其实也可以这样理解，HashSet的底层实现和HashMap使用的是相同的方式，因为Map是无序的，因此HashSet也无法保证顺序。HashSet的方法也是借助HashMap的方法来实现的。]]></content>
      <categories>
        <category>JAVA集合</category>
      </categories>
      <tags>
        <tag>HashSet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java8的集合1：ArrayList的实现原理]]></title>
    <url>%2F2019%2F04%2F28%2FJava8%E7%9A%84%E9%9B%86%E5%90%881%EF%BC%9AArrayList%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[概述：一上来，先来看看源码中的这一段注释，我们可以从中提取到一些关键信息：Resizable-array implementation of the List interface. Implements all optional list operations, and permits all elements, including null. In addition to implementing the List interface, this class provides methods to manipulate the size of the array that is used internally to store the list. (This class is roughly equivalent to Vector, except that it is unsynchronized.)从这段注释中，我们可以得知ArrayList是一个动态数组，实现了List接口以及list相关的所有方法，它允许所有元素的插入，包括null。另外，ArrayList和Vector除了线程不同步之外，大致相等。 属性1234567891011121314151617//默认容量的大小private static final int DEFAULT_CAPACITY = 10;//空数组常量private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;//默认的空数组常量private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;//存放元素的数组，从这可以发现ArrayList的底层实现就是一个Object数组transient Object[] elementData;//数组中包含的元素个数private int size;//数组的最大上限private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; ArrayList的属性非常少，就只有这些。其中最重要的莫过于elementData了，ArrayList所有的方法都是建立在elementData之上。接下来，我们就来看一下一些主要的方法。 方法构造方法123456789101112public ArrayList(int initialCapacity) &#123; if (initialCapacity &gt; 0) &#123; this.elementData = new Object[initialCapacity]; &#125; else if (initialCapacity == 0) &#123; this.elementData = EMPTY_ELEMENTDATA; &#125; else &#123; throw new IllegalArgumentException("Illegal Capacity: "+initialCapacity); &#125;&#125;public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&#125; 从构造方法中我们可以看见，默认情况下，elementData是一个大小为0的空数组，当我们指定了初始大小的时候，elementData的初始大小就变成了我们所指定的初始大小了。 get方法1234567891011public E get(int index) &#123; rangeCheck(index); return elementData(index);&#125;private void rangeCheck(int index) &#123; if (index &gt;= size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index));&#125;E elementData(int index) &#123; return (E) elementData[index];&#125; 因为ArrayList是采用数组结构来存储的，所以它的get方法非常简单，先是判断一下有没有越界，之后就可以直接通过数组下标来获取元素了，所以get的时间复杂度是O(1) add方法123456789101112131415161718192021222324public boolean add(E e) &#123; ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true;&#125;public void add(int index, E element) &#123; rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! //调用一个native的复制方法，把index位置开始的元素都往后挪一位 System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++;&#125;private void ensureCapacityInternal(int minCapacity) &#123; if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); &#125; ensureExplicitCapacity(minCapacity);&#125;private void ensureExplicitCapacity(int minCapacity) &#123; modCount++; if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125; ArrayList的add方法也很好理解，在插入元素之前，它会先检查是否需要扩容，然后再把元素添加到数组中最后一个元素的后面。在ensureCapacityInternal方法中，我们可以看见，如果当elementData为空数组时，它会使用默认的大小去扩容。所以说，通过无参构造方法来创建ArrayList时，它的大小其实是为0的，只有在使用到的时候，才会通过grow方法去创建一个大小为10的数组。 第一个add方法的复杂度为O(1)，虽然有时候会涉及到扩容的操作，但是扩容的次数是非常少的，所以这一部分的时间可以忽略不计。如果使用的是带指定下标的add方法，则复杂度为O(n)，因为涉及到对数组中元素的移动，这一操作是非常耗时的。 set方法123456public E set(int index, E element) &#123; rangeCheck(index); E oldValue = elementData(index); elementData[index] = element; return oldValue;&#125; set方法的作用是把下标为index的元素替换成element，跟get非常类似，所以就不在赘述了，时间复杂度度为O(1)。 remove方法12345678910public E remove(int index) &#123; rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved &gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue;&#125; remove方法与add带指定下标的方法非常类似，也是调用系统的arraycopy方法来移动元素，时间复杂度为O(n)。 grow方法 1234567891011private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity);&#125; grow方法是在数组进行扩容的时候用到的，从中我们可以看见，ArrayList每次扩容都是扩1.5倍，然后调用Arrays类的copyOf方法，把元素重新拷贝到一个新的数组中去。 size方法 123public int size() &#123; return size;&#125; size方法非常简单，它是直接返回size的值，也就是返回数组中元素的个数，时间复杂度为O(1)。这里要注意一下，返回的并不是数组的实际大小。 indexOf方法和lastIndexOf 123456789101112131415161718192021222324public int indexOf(Object o) &#123; if (o == null) &#123; for (int i = 0; i &lt; size; i++) if (elementData[i]==null) return i; &#125; else &#123; for (int i = 0; i &lt; size; i++) if (o.equals(elementData[i])) return i; &#125; return -1;&#125;public int lastIndexOf(Object o) &#123; if (o == null) &#123; for (int i = size-1; i &gt;= 0; i--) if (elementData[i]==null) return i; &#125; else &#123; for (int i = size-1; i &gt;= 0; i--) if (o.equals(elementData[i])) return i; &#125; return -1;&#125; indexOf方法的作用是返回第一个等于给定元素的值的下标。它是通过遍历比较数组中每个元素的值来查找的，所以它的时间复杂度是O(n)。 lastIndexOf的原理跟indexOf一样，而它仅仅是从后往前找起罢了。 VectorVector的很多方法都跟ArrayList一样，只是多加了个synchronized来保证线程安全。所以只把Vector与ArrayList的不同点提一下就可以了。 Vector比ArrayList多了一个属性：1protected int capacityIncrement; 这个属性是在扩容的时候用到的，它表示每次扩容只扩capacityIncrement个空间就足够了。该属性可以通过构造方法给它赋值。先来看一下构造方法： 12345678910111213public Vector(int initialCapacity, int capacityIncrement) &#123; super(); if (initialCapacity &lt; 0) throw new IllegalArgumentException("Illegal Capacity: "+initialCapacity); this.elementData = new Object[initialCapacity]; this.capacityIncrement = capacityIncrement;&#125;public Vector(int initialCapacity) &#123; this(initialCapacity, 0);&#125;public Vector() &#123; this(10);&#125; 从构造方法中，我们可以看出Vector的默认大小也是10，而且它在初始化的时候就已经创建了数组了，这点跟ArrayList不一样。 再来看一下grow方法：12345678910private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ? capacityIncrement : oldCapacity); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); elementData = Arrays.copyOf(elementData, newCapacity);&#125; 从grow方法中我们可以发现，newCapacity默认情况下是两倍的oldCapacity，而当指定了capacityIncrement的值之后，newCapacity变成了oldCapacity+capacityIncrement。 总结 ArrayList创建时的大小为0；当加入第一个元素时，进行第一次扩容时，默认容量大小为10。 ArrayList每次扩容都以当前数组大小的1.5倍去扩容。 Vector创建时的默认大小为10。 Vector每次扩容都以当前数组大小的2倍去扩容。当指定了capacityIncrement之后，每次扩容仅在原先基础上增加capacityIncrement个单位空间。 ArrayList和Vector的add、get、size方法的复杂度都为O(1)，remove方法的复杂度为O(n)。 ArrayList是非线程安全的，Vector是线程安全的。]]></content>
      <categories>
        <category>JAVA集合</category>
      </categories>
      <tags>
        <tag>ArrayList</tag>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java：CAS]]></title>
    <url>%2F2019%2F04%2F26%2FJava%EF%BC%9ACAS%2F</url>
    <content type="text"><![CDATA[悲观锁和乐观锁 什么是悲观锁、乐观锁？在java语言里，总有一些名词看语义跟本不明白是啥玩意儿，也就总有部分面试官拿着这样的词来忽悠面试者，以此来找优越感，其实理解清楚了，这些词也就唬不住人了。 synchronized 是悲观锁，这种线程一旦得到锁，其他需要锁的线程就挂起的情况就是悲观锁。 CAS 操作的就是乐观锁，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。 从思想上来说，Synchronized属于悲观锁，悲观地认为程序中的并发情况严重，所以严防死守。CAS属于乐观锁，乐观地认为程序中的并发情况不那么严重，所以让线程不断去尝试更新。线程安全 在进入正题之前，我们先理解下下面的代码:12345678910111213141516171819202122232425private static int count = 0; public static void main(String[] args) &#123; for (int i = 0; i &lt; 2; i++) &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(10); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //每个线程让count自增100次 for (int i = 0; i &lt; 100; i++) &#123; count++; &#125; &#125; &#125;).start(); &#125; try&#123; Thread.sleep(2000); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; System.out.println(count); &#125; 请问cout的输出值是否为200？答案是否定的，因为这个程序是线程不安全的，所以造成的结果count值可能小于200。 那么如何改造成线程安全的呢，其实我们可以使用上Synchronized同步锁,我们只需要在count++的位置添加同步锁，代码如下:123456789101112131415161718192021222324252627private static int count = 0; public static void main(String[] args) &#123; for (int i = 0; i &lt; 2; i++) &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(10); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //每个线程让count自增100次 for (int i = 0; i &lt; 100; i++) &#123; synchronized (ThreadCas.class)&#123; count++; &#125; &#125; &#125; &#125;).start(); &#125; try&#123; Thread.sleep(2000); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; System.out.println(count); &#125; 加了同步锁之后，count自增的操作变成了原子性操作，所以最终的输出一定是count=200，代码实现了线程安全。 但是Synchronized虽然确保了线程的安全，但是在性能上却不是最优的，Synchronized关键字会让没有得到锁资源的线程进入BLOCKED状态，而后在争夺到锁资源后恢复为RUNNABLE状态，这个过程中涉及到操作系统用户模式和内核模式的转换，代价比较高。 因此，在JAVA中改用原子类操作加以改进。所谓原子操作类，指的是java.util.concurrent.atomic包下，一系列以Atomic开头的包装类。例如AtomicBoolean，AtomicInteger，AtomicLong。它们分别用于Boolean，Integer，Long类型的原子性操作。123456789101112131415161718192021222324252627private static AtomicInteger count = new AtomicInteger(0);public static void main(String[] args) &#123; for (int i = 0; i &lt; 2; i++) &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(10); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //每个线程让count自增100次 for (int i = 0; i &lt; 100; i++) &#123; count.incrementAndGet(); &#125; &#125; &#125;).start(); &#125; try&#123; Thread.sleep(2000); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; System.out.println(count);&#125; 使用AtomicInteger之后，最终的输出结果同样可以保证是200。并且在某些情况下，代码的性能会比Synchronized更好。而Atomic操作的底层实现正是利用的CAS机制。 JMM 想要理解CAS，首先先要了解下JMM。 JMM：Java内存模型，是一种抽象的概念，可以理解为一组规范。 JMM的特性：可见性，原子性，有序性。 JMM关于同步的规定： 线程解锁前必须将共享变量的值刷新回主内存。 线程加锁前必须读主内存的最新值到自己的工作内存中。 加锁解锁是同一把锁。 线程间的通信（传值）必须通过主内存。 什么是CAS？ 在计算机科学中，比较并交换（Conmpare And Swap）是用于实现多线程同步的原子指令。 它将内存位置的内容与给定值进行比较，只有在相同的情况下，将该内存位置的内容修改为新的给定值。 这是作为单个原子操作完成的。 原子性保证新值基于最新信息计算; 如果该值在同一时间被另一个线程更新，则写入将失败。 操作结果必须说明是否进行替换; 这可以通过一个简单的布尔响应（这个变体通常称为比较和设置），或通过返回从内存位置读取的值来完成（摘自维基本科）。 CAS的思想很简单：三个参数，一个当前内存值V、旧的预期值A、即将更新的值B，当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做，并返回false。 使用 compareAndSet方法将内存中的值5进行修改，第一次修改成功，内存中的值被改为2019，第二次进行比较时，由于内存中的值已经被修改，所以操作失败。123456public static void main(String[] args) &#123; AtomicInteger atomicInteger = new AtomicInteger(5); //main do something System.out.println(atomicInteger.compareAndSet(5,2019)+"\t current data: "+atomicInteger.get()); System.out.println(atomicInteger.compareAndSet(5,1024)+"\t current data: "+atomicInteger.get()); &#125; CAS的缺点 CPU开销较大：在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很大的压力。 不能保证代码块的原子性CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用Synchronized了。 可能会出现ABA问题。 ABA问题 什么是ABA问题？简单来说一句话：狸猫换太子。举个例子：如线程1从内存X中取出A，这时候另一个线程2也从内存X中取出A，并且线程2进行了一些操作将内存X中的值变成了B，然后线程2又将内存X中的数据变成A，这时候线程1进行CAS操作发现内存X中仍然是A，然后线程1操作成功。虽然线程1的CAS操作成功，但是整个过程就是有问题的。比如链表的头在变化了两次后恢复了原值，但是不代表链表就没有变化。 如何解决：JAVA中提供了AtomicStampedReference来处理会发生ABA问题的场景，主要是在对象中额外再增加一个标记来标识对象是否有过变更（类似于GitHub的版本号）。 测试代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758static AtomicReference&lt;Integer&gt; atomicReference = new AtomicReference&lt;&gt;(100);static AtomicStampedReference&lt;Integer&gt; atomicStampedReference = new AtomicStampedReference&lt;&gt;(100,1);public static void main(String[] args) &#123; System.out.println("=============以下是ABA问题的产生============="); new Thread(()-&gt;&#123; atomicReference.compareAndSet(100,101); atomicReference.compareAndSet(101,100); &#125;,"t1").start(); new Thread(()-&gt;&#123; try &#123; //暂停1S线程2，保证线程1完成ABA操作 TimeUnit.SECONDS.sleep(1); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(atomicReference.compareAndSet(100,2019)+"\t"+atomicReference.get()); &#125;,"t2").start(); try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println("=============以下是ABA问题的解决============="); new Thread(()-&gt;&#123; int stamp = atomicStampedReference.getStamp(); System.out.println(Thread.currentThread().getName()+"\t第一次版本号： "+stamp); try &#123; //暂停1S线程3 TimeUnit.SECONDS.sleep(1); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(atomicStampedReference.compareAndSet(100,101, atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+1)); System.out.println(Thread.currentThread().getName()+"\t第二次版本号： "+atomicStampedReference.getStamp()); System.out.println(atomicStampedReference.compareAndSet(101,100, atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+1)); System.out.println(Thread.currentThread().getName()+"\t第三次版本号： "+atomicStampedReference.getStamp()); &#125;,"t3").start(); new Thread(()-&gt;&#123; int stamp = atomicStampedReference.getStamp(); System.out.println(Thread.currentThread().getName()+"\t第一次版本号： "+stamp); try &#123; //暂停3S线程4，保证线程3完成ABA操作 TimeUnit.SECONDS.sleep(3); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; boolean result = atomicStampedReference.compareAndSet(100,2019,stamp,stamp+1); System.out.println(Thread.currentThread().getName()+"\t修改成功否： "+result+"\t 当前最新实际版本号： "+atomicStampedReference.getStamp()); System.out.println(Thread.currentThread().getName()+"\t当前实际最新值： "+atomicStampedReference.getReference()); &#125;,"t4").start();&#125; 输出结果：1234567891011=============以下是ABA问题的产生=============true 2019=============以下是ABA问题的解决=============t3 第一次版本号： 1t4 第一次版本号： 1truet3 第二次版本号： 2truet3 第三次版本号： 3t4 修改成功否： false 当前最新实际版本号： 3t4 当前实际最新值： 100]]></content>
      <categories>
        <category>JAVA_CAS</category>
      </categories>
      <tags>
        <tag>JAVA_CAS</tag>
        <tag>ABA问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github+Hexo搭建个人博客]]></title>
    <url>%2F2019%2F04%2F25%2FGithub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[准备环境 安装 Node 安装 Git 注册 GitHub 安装 Hexo 11 npm install hexo-cli -g 搭建本地个人博客 初始化 hexo 新建一个空白文件夹（下文提到的“项目根目录”是指你新建的文件夹的位置）用于存放 hexo 资源。在空白文件夹里面打开 Git Bash ，输入下列命令行进行初始化。 11 hexo init 生成静态页面11 hexo g 启动本地服务11 hexo s 关闭本地服务器在 Git Bash 界面按 Ctrl+C， 在浏览器输入：http://localhost:4000 查看 美化个人博客 博客主题设置克隆主题 在项目根目录下的 themes 文件中，打开 Git Bash ，用命令行克隆下新的主题。我这里用的 Next 主题，需要其他主题的自己百度找。 11 git clone https://github.com/theme-next/hexo-theme-next.git 配置主题 用文本的方式打开项目根目录下的 _config.yml 配置文件，找到 theme 把原来默认的 landscape 主题名字，改成刚刚克隆的主题名字。 测试主题 重新回到项目根目录下，打开 Git Bath ，用命令行启动服务器。在浏览器访问 http://localhost:4000 发布文章 方法一：在项目根目录下，打开 Git Bash ，执行新建命令，然后 hexo 会自动在指定目录下生成对应文件，如下图所示。然后找到新建好的文件，打开即可进行编辑。 11 hexo new "此处输入文章名字" 方法二：可以直接把已经准备的 md 格式的文章复制到 项目名称 /source/_posts 目录下，然后打开文件，在文件头加入 front-matter 部分，title 表示文章标题，date 表示发布时间。如图所示，图片上用到的其他参数，后面会介绍到。 重要的事情说三遍！！！ front-matte 书写的时候要注意，冒号后面要跟一个空格号 front-matte 书写的时候要注意，冒号后面要跟一个空格号 front-matte 书写的时候要注意，冒号后面要跟一个空格号 12341 ---2 title: a3 date: 2019-04-25 21:27:134 --- 准备好 md 格式文件后，使用下面命令生成网站静态文件到默认设置的 public 文件夹，然后再启动本地服务器。 11 hexo g 主题风格设置 打开主题文件夹下的 _config.yml 配置文件（注意：这里要区别，不是項目根目录，主题文件夹的路径为：新建空白文件夹名称/themes/主题文件夹名称）。通过查找功能找到 Schemes 模块，修改为 Gemini 风格。如果喜欢其他风格可以自己修改。 刷新页面可以看到新风格的界面如下图所示:博客左侧栏设置 在上面的网站界面，可以发现网站的文字是英文，只要修改一下语言模式即可。打开根目录文件夹下的 _config.yml配置文件。找到 language，设置为 zh-CN。标题等其他参数的设置如下。可以对照效果图的具体位置，根据自己的实际需求进行修改。（注意：修改了项目根目录下的 _config.yml配置文件，需要重启部署项目后才能生效）分类设置添加分类列表 在项目根目录下，执行下面的命令行，新建分类页面，然后会在项目根目录下的 source 文件夹中新建一个 categories 文件夹。 11 hexo new page categories 打开 categories 文件夹中的 index.md 文件，添加 type 字段，设置为 “categories”。如下图所示。 123451 ---2 title: categories3 date: 2019-04-25 22:17:144 type: "categories"5 --- 接着到主题文件夹下的_config.yml 配置文件下，找到 menu 模块，把 categories 的注释给去掉。 刷新页面（如果刷新没效果，可以重启服务），可以在页面左侧栏上看到多了一个“分类”列表。如何将文章添加到对应分类？ 文章发布前，在 front-matter 部分，多写一个 categories 字段，然后参数写上类别的名称，保存后重启服务，在网页上点击“分类”，可以看到分类下已经生成了刚刚设置的类别，并把刚刚发布的文章归类在此类别下。如下图所示123451 ---2 title: "文章的标题"3 date: 2019-04-25 22:17:144 categories: "文章的分类"5 --- 标签设置 方法跟分类设置一样，所以不再赘述介绍 但是需要补充一点， front-matter 中字段有多个参数的时候，可以使用如下图的写法。1234567891011121 ---2 title: "文章的标题"3 date: 2019-04-25 22:17:144 categories: "文章的分类"5 tags: 6 -"标签1"7 -"标签2"8 -"标签3"9 description: "描述"10 photos: 11 -"链接"12 --- 博客添加站内搜索 NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia。下面介绍 Local Search 的安装吧。注意：安装的时候要是项目根目录下安装。 安装 hexo-generator-search 11 npm install hexo-generator-search --save 安装 hexo-generator-searchdb 11 npm install hexo-generator-searchdb --save 在项目根目录下的 _config.yml 配置文件的文末添加下面这段代码。 123451 search:2 path: search.xml3 field: post4 format: html5 limit: 10000 编辑主题文件夹的 _config.yml 配置文件，设置 Local searchenable 为 ture。 重启服务博客头像设置添加博客头像 打开主题文件夹下的 _config.yml 配置文件，通过查找功能找到 avatar，然后把一个在线的头像图片地址（百度图片中直接复制链接即可），作为 url 的参数。 然后刷新页面，可以看到网站上已经显示了相应的头像了。右上角 fork me 设置 在 GitHub Corners 上选择你喜欢的挂饰，复制方框内的代码。 打开主题文件夹下的 layout 文件夹，用记事本的方式打开 _layout.swig，把刚刚复制的代码放到下面，并把 href 的参数，修改为自己的 github 链接（放自己要跳转的网址即可）。 重启服务器，查看效果网页背景设置动态背景设置 打开主题文件夹下的 layout 文件夹，用文本的方式打开 _layout.swig 文件，在文末加上如下的代码：121 &lt;!-- 动态背景 --&gt;2 &lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt; 背景图片设置 打开主题文件夹下的 source 文件夹，进入 css/_custom 文件下，用文本形式打开 custom.styl 文件，然后添加下面这段代码。代码中 url 的地址是指到： 主题文件夹/source/images/ 。1234567891 body&#123;2 background:url(/images/bg.jpg);3 background-size:cover;4 background-repeat:no-repeat;5 background-attachment:fixed;6 background-position:center;7 // 设置主题部分的透明度，具体看图8 opacity: 0.8;9 &#125; 首页文章预览设置 默认情况下，文章在首页是全文显示的，这样肯定是不方便读者浏览。所以需要实现预览模式。 方法一：使用 &lt; !–more–&gt; 手动切断这种方法可以根据文章的内容，自己在合适的位置添加 &lt; !–more–&gt; 标签，使用灵活，也是Hexo推荐的方法。 方法二：添加 description在文章的 front-matter 中添加 description 和 photos 字段，如3.5图所示。如果不需要显示图片的话，可以把 photos 去掉。ps：不知道 front-matter 是什么的话，跳转到第二章的第4点的发布文章看下。 方法三：自动形成摘要在主题文件下的_config.yml 配置文件中添加默认截取的长度为 150 字符，可以根据需要自行设定。1231 auto_excerpt:2 enable: true3 length: 150 RSS 设置 安装 hexo 插件，需要在 hexo 项目根目录下进行安装。 11 npm install --save hexo-generator-feed 安装完成后在项目根目录下的 _config.yml 配置文件的文末添加下面这段代码： 1231 # Extentions2 ## Plugins: http://hexo.io/plugins/3 plugins: hexo-generator-feed 在主题文件夹下的 _config.yml 配置文件中，找到 rss ，在后面加上 /atom.xml。 重启服务，刷新页面社交小图标设置 在主题文件夹下的_config.yml 配置文件中，搜索 Social，然后提示自己增加自己需要的小图标并设置对应连接。 图标可以到 Font Awesome Icon 网站查找。友情链接设置 在主题文件夹下的 _config.yml 配置文件中，搜索 links_title，然后根据自己的需求自己吸修改。博客置顶设置 安装插件 121 npm uninstall hexo-generator-index --save2 npm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的 Front-matter 中加上 top 即可，数值越大表示等级越高，越靠前显示。 123451 ---2 title: "文章的标题"3 date: 2019-04-25 22:17:144 top: 1005 --- 在主题文件夹中打开 layout/_macro/post.swig 文件，定位到 post-header ，把下面的代码添加进去即可。 12341 &#123;% if post.top %&#125;2 &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt;3 &lt;font color=7D26CD&gt;置顶&lt;/font&gt;4 &#123;% endif %&#125; 对接Github的远程仓库 在Github创建一个公有仓库，并把公有仓库的链接保存下来。注意：仓库名字必须是：username.github.io，其中username是你的用户名。 打开项目根目录下的 _config.yml 配置文件，修改 deploy 的值。tpye 设置为 git，repo 则设置为刚刚新建的远程仓库链接。 注意：冒号后面需要再加一个空格，不然会出现格式错误。 安装hexo-deployer-gi 11 npm install hexo-deployer-git --save 一键部署到远程仓库 121 hexo g2 hexo deploy 回到刚刚新建的远程仓库，刷新页面，可以发现本地博客的相关文件已经全部部署到远程仓库上了。 常用hexo命令 常见命令 1234567hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令： 12hexo s -g #生成并本地预览hexo d -g #生成并上传 本文参考链接 https://www.jianshu.com/p/13f5e4d7099d http://theme-next.iissnan.com/theme-settings.html#rss https://www.jianshu.com/p/9f0e90cc32c2 https://www.simon96.online/2018/10/12/hexo-tutorial/ http://zwd596257180.gitee.io/blog/2019/04/15/hexo_manong_bog/ https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
